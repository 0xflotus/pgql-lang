module BuiltInFunctions

imports
  
  Keywords
  Names
  Expressions
  GMQL
  Literals

context-free syntax // inlined function calls

  InlinedCall.Has = <has(<{Prop ", "}*>)>
  InlinedCall.InDegree  = <inDegree()>
  InlinedCall.OutDegree = <outDegree()>
  InlinedCall.Src = <src()>
  InlinedCall.Dst = <dst()>
  
  InlinedCall.Nodes  = <nodes()>
  InlinedCall.Edges  = <edges()>
  InlinedCall.Length = <length()>
  InlinedCall.Weight = <weight()>

context-free syntax // nodes/edges

  FunctionCall.Has = <<Exp>. has(<{Prop ", "}*>)>
  
context-free syntax // nodes

  FunctionCall.InDegree  = <<Exp>. inDegree()>
  FunctionCall.OutDegree = <<Exp>. outDegree()>
  
context-free syntax // edges

  FunctionCall.Src = <<Exp>. src()>
  FunctionCall.Dst = <<Exp>. dst()>

context-free syntax // paths

  FunctionCall.Nodes  = <<Exp>. nodes()>
  FunctionCall.Edges  = <<Exp>. edges()>
  FunctionCall.Length = <<Exp>. length()>
  FunctionCall.Weight = <<Exp>. weight()>

context-free syntax // lists
  
  FunctionCall.Head = <<Exp>. head()>
  FunctionCall.Last = <<Exp>. last()>
  FunctionCall.Init = <<Exp>. init()>
  FunctionCall.Tail = <<Exp>. tail()>

context-free syntax // Strings

  FunctionCall.Contains   = <<Exp>. contains(<Exp>, <Exp>)>
  FunctionCall.BeginsWith = <<Exp>. beginsWith(<Exp>, <Exp>)>
  FunctionCall.EndsWith   = <<Exp>. endWith(<Exp>, <Exp>)>

context-free syntax // Time

  FunctionCall.Between = <<Exp>. between(<Exp>, <Exp>)>
  FunctionCall.Year = <<Exp>. year()>
  FunctionCall.Month = <<Exp>. month()>
  FunctionCall.Day = <<Exp>. day()>
  FunctionCall.Hours = <<Exp>. hours()>
  FunctionCall.Minutes = <<Exp>. minutes()>
  FunctionCall.Seconds = <<Exp>. seconds()>
  FunctionCall.Timezone = <<Exp>. timezone()>

context-free syntax // EXISTS / NOT EXISTS / CASE

  FunctionCall.ExistsFunc    = <EXISTS <GroupGraphPattern>>
  FunctionCall.Case          = <CASE <Exp> <{WhenThen " "}+> ELSE <Exp> END>
  WhenThen.WhenThen          = <WHEN <Exp> THEN <Exp>>

context-free syntax // Aggregates

  FunctionCall.COUNT        = <COUNT(<Distinct?><StarOrExp>)>
  FunctionCall.MIN          = <MIN(<Distinct?><Exp>)>
  FunctionCall.MAX          = <MAX(<Distinct?><Exp>)>
  FunctionCall.SUM          = <SUM(<Distinct?><Exp>)>
  FunctionCall.AVG          = <AVG(<Distinct?><Exp>)>
  FunctionCall.GROUP-CONCAT = <GROUP_CONCAT(<Distinct?><Exp><Group-Concat-Sep?>)>
  
  StarOrExp.Star = <*>
  StarOrExp = <<Exp>>
  Group-Concat-Sep.Sep = <, <String>>
  Distinct.Distinct = <DISTINCT>

