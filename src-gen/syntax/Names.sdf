module Names
imports Keywords Literals Expressions

exports
  context-free syntax
    Var             -> VarDef     {cons("VarDef")}
    Var             -> VarRef     {cons("VarRef")}
    Exp VarAssign?  -> ExpAsVar   {cons("ExpAsVar")}
    AS VarDef       -> VarAssign  {cons("VarAssign")}
    Var             -> NodeVarRef {cons("NodeVarRef")}
    VarRef "." Prop -> PropRef    {cons("PropRef")}
    VARNAME         -> Var        
    PROPNAME        -> Prop       
    STRING          -> Prop       
    "."             -> Dot        {cons("Dot")}

  context-free syntax
    CONTENTCOMPLETE -> VarDef     {cons("COMPLETION-VarDef")}
    CONTENTCOMPLETE -> VarRef     {cons("COMPLETION-VarRef")}
    CONTENTCOMPLETE -> ExpAsVar   {cons("COMPLETION-ExpAsVar")}
    CONTENTCOMPLETE -> VarAssign  {cons("COMPLETION-VarAssign")}
    CONTENTCOMPLETE -> NodeVarRef {cons("COMPLETION-NodeVarRef")}
    CONTENTCOMPLETE -> PropRef    {cons("COMPLETION-PropRef")}
    CONTENTCOMPLETE -> Var        {cons("COMPLETION-Var")}
    CONTENTCOMPLETE -> Prop       {cons("COMPLETION-Prop")}
    CONTENTCOMPLETE -> Dot        {cons("COMPLETION-Dot")}

  lexical syntax
    [a-zA-Z] [a-zA-Z0-9\_]* -> GRAPHNAME 
    [a-zA-Z] [a-zA-Z0-9\_]* -> VARNAME   
    [a-zA-Z0-9\_]+          -> PROPNAME  

  lexical syntax
    

  lexical restrictions
    GRAPHNAME -/- [a-zA-Z0-9\_]
    VARNAME -/- [a-zA-Z0-9\_]
    PROPNAME -/- [a-zA-Z0-9\_]