module Expressions
imports Keywords Names Literals BuiltInFunctions

exports
  context-free syntax
    "(" Exp ")"   -> Exp {bracket}
    PropRef       -> Exp 
    VarRef        -> Exp 
    Literal       -> Exp 
    FunctionCall  -> Exp 
    NOT Exp       -> Exp {cons("Not1"), right}
    "!" Exp       -> Exp {cons("Not2"), right}
    "-" Exp       -> Exp {cons("UMin"), right}
    Exp "AND" Exp -> Exp {cons("And"), left}
    Exp "OR" Exp  -> Exp {cons("Or"), left}
    Exp "and" Exp -> Exp {cons("And2"), left}
    Exp "or" Exp  -> Exp {cons("Or2"), left}
    Exp "And" Exp -> Exp {cons("And3"), left}
    Exp "Or" Exp  -> Exp {cons("Or3"), left}
    Exp "*" Exp   -> Exp {cons("Mul"), left}
    Exp "+" Exp   -> Exp {cons("Add"), left}
    Exp "/" Exp   -> Exp {cons("Div"), left}
    Exp "%" Exp   -> Exp {cons("Mod"), left}
    Exp "-" Exp   -> Exp {cons("Sub"), left}
    Exp "=" Exp   -> Exp {cons("Eq"), left}
    Exp ">" Exp   -> Exp {cons("Gt"), left}
    Exp "<" Exp   -> Exp {cons("Lt"), left}
    Exp ">=" Exp  -> Exp {cons("Gte"), left}
    Exp "<=" Exp  -> Exp {cons("Lte"), left}
    Exp "!=" Exp  -> Exp {cons("Neq"), left}
    Exp "=~" Exp  -> Exp {cons("Regex"), left, prefer}

  context-free syntax
    CONTENTCOMPLETE -> Exp {cons("COMPLETION-Exp")}

  context-free syntax
    "(" InlinedExp ")"          -> InlinedExp {bracket}
    PropRef                     -> InlinedExp 
    Literal                     -> InlinedExp {prefer}
    InlinedCall                 -> InlinedExp 
    Prop                        -> InlinedExp {cons("SelfPropRef")}
    NOT InlinedExp              -> InlinedExp {cons("Not1"), right}
    "!" InlinedExp              -> InlinedExp {cons("Not2"), right}
    "-" InlinedExp              -> InlinedExp {cons("UMin"), right}
    InlinedExp "AND" InlinedExp -> InlinedExp {cons("And"), left}
    InlinedExp "OR" InlinedExp  -> InlinedExp {cons("Or"), left}
    InlinedExp "and" InlinedExp -> InlinedExp {cons("And2"), left}
    InlinedExp "or" InlinedExp  -> InlinedExp {cons("Or2"), left}
    InlinedExp "And" InlinedExp -> InlinedExp {cons("And3"), left}
    InlinedExp "Or" InlinedExp  -> InlinedExp {cons("Or3"), left}
    InlinedExp "*" InlinedExp   -> InlinedExp {cons("Mul"), left}
    InlinedExp "+" InlinedExp   -> InlinedExp {cons("Add"), left}
    InlinedExp "/" InlinedExp   -> InlinedExp {cons("Div"), left}
    InlinedExp "%" InlinedExp   -> InlinedExp {cons("Mod"), left}
    InlinedExp "-" InlinedExp   -> InlinedExp {cons("Sub"), left}
    InlinedExp "=" InlinedExp   -> InlinedExp {cons("Eq"), left}
    InlinedExp ">" InlinedExp   -> InlinedExp {cons("Gt"), left}
    InlinedExp "<" InlinedExp   -> InlinedExp {cons("Lt"), left}
    InlinedExp ">=" InlinedExp  -> InlinedExp {cons("Gte"), left}
    InlinedExp "<=" InlinedExp  -> InlinedExp {cons("Lte"), left}
    InlinedExp "!=" InlinedExp  -> InlinedExp {cons("Neq"), left}
    InlinedExp "=~" InlinedExp  -> InlinedExp {cons("Regex"), left, prefer}

  context-free syntax
    CONTENTCOMPLETE -> InlinedExp {cons("COMPLETION-InlinedExp")}