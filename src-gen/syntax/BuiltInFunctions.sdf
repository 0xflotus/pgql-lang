module BuiltInFunctions
imports Keywords Names Expressions PGQL Literals

exports
  context-free syntax
    "has" "(" {Prop ","}* ")" -> InlinedCall {cons("Has")}
    "inDegree" "()"           -> InlinedCall {cons("InDegree")}
    "outDegree" "()"          -> InlinedCall {cons("OutDegree")}
    "src" "()"                -> InlinedCall {cons("Src")}
    "dst" "()"                -> InlinedCall {cons("Dst")}
    "nodes" "()"              -> InlinedCall {cons("Nodes")}
    "edges" "()"              -> InlinedCall {cons("Edges")}
    "length" "()"             -> InlinedCall {cons("Length")}
    "weight" "()"             -> InlinedCall {cons("Weight")}

  context-free syntax
    CONTENTCOMPLETE -> InlinedCall {cons("COMPLETION-InlinedCall")}

  context-free syntax
    Exp "." "has" "(" {Prop ","}* ")" -> FunctionCall {cons("Has")}

  context-free syntax
    CONTENTCOMPLETE -> FunctionCall {cons("COMPLETION-FunctionCall")}

  context-free syntax
    Exp "." "inDegree" "()"  -> FunctionCall {cons("InDegree")}
    Exp "." "outDegree" "()" -> FunctionCall {cons("OutDegree")}

  context-free syntax
    CONTENTCOMPLETE -> FunctionCall {cons("COMPLETION-FunctionCall")}

  context-free syntax
    Exp "." "src" "()" -> FunctionCall {cons("Src")}
    Exp "." "dst" "()" -> FunctionCall {cons("Dst")}

  context-free syntax
    CONTENTCOMPLETE -> FunctionCall {cons("COMPLETION-FunctionCall")}

  context-free syntax
    Exp "." "nodes" "()"  -> FunctionCall {cons("Nodes")}
    Exp "." "edges" "()"  -> FunctionCall {cons("Edges")}
    Exp "." "length" "()" -> FunctionCall {cons("Length")}
    Exp "." "weight" "()" -> FunctionCall {cons("Weight")}

  context-free syntax
    CONTENTCOMPLETE -> FunctionCall {cons("COMPLETION-FunctionCall")}

  context-free syntax
    Exp "." "head" "()" -> FunctionCall {cons("Head")}
    Exp "." "last" "()" -> FunctionCall {cons("Last")}
    Exp "." "init" "()" -> FunctionCall {cons("Init")}
    Exp "." "tail" "()" -> FunctionCall {cons("Tail")}

  context-free syntax
    CONTENTCOMPLETE -> FunctionCall {cons("COMPLETION-FunctionCall")}

  context-free syntax
    Exp "." "contains" "(" Exp "," Exp ")"   -> FunctionCall {cons("Contains")}
    Exp "." "beginsWith" "(" Exp "," Exp ")" -> FunctionCall {cons("BeginsWith")}
    Exp "." "endWith" "(" Exp "," Exp ")"    -> FunctionCall {cons("EndsWith")}

  context-free syntax
    CONTENTCOMPLETE -> FunctionCall {cons("COMPLETION-FunctionCall")}

  context-free syntax
    Exp "." "between" "(" Exp "," Exp ")" -> FunctionCall {cons("Between")}
    Exp "." "year" "()"                   -> FunctionCall {cons("Year")}
    Exp "." "month" "()"                  -> FunctionCall {cons("Month")}
    Exp "." "day" "()"                    -> FunctionCall {cons("Day")}
    Exp "." "hours" "()"                  -> FunctionCall {cons("Hours")}
    Exp "." "minutes" "()"                -> FunctionCall {cons("Minutes")}
    Exp "." "seconds" "()"                -> FunctionCall {cons("Seconds")}
    Exp "." "timezone" "()"               -> FunctionCall {cons("Timezone")}

  context-free syntax
    CONTENTCOMPLETE -> FunctionCall {cons("COMPLETION-FunctionCall")}

  context-free syntax
    "EXISTS" GroupGraphPattern            -> FunctionCall {cons("ExistsFunc")}
    "CASE" Exp WhenThen+ "ELSE" Exp "END" -> FunctionCall {cons("Case")}
    "WHEN" Exp "THEN" Exp                 -> WhenThen     {cons("WhenThen")}

  context-free syntax
    CONTENTCOMPLETE -> FunctionCall {cons("COMPLETION-FunctionCall")}
    CONTENTCOMPLETE -> WhenThen     {cons("COMPLETION-WhenThen")}

  context-free syntax
    "COUNT" "(" Distinct? StarOrExp ")"                    -> FunctionCall     {cons("COUNT")}
    "MIN" "(" Distinct? Exp ")"                            -> FunctionCall     {cons("MIN")}
    "MAX" "(" Distinct? Exp ")"                            -> FunctionCall     {cons("MAX")}
    "SUM" "(" Distinct? Exp ")"                            -> FunctionCall     {cons("SUM")}
    "AVG" "(" Distinct? Exp ")"                            -> FunctionCall     {cons("AVG")}
    "GROUP_CONCAT" "(" Distinct? Exp Group-Concat-Sep? ")" -> FunctionCall     {cons("GROUP-CONCAT")}
    "*"                                                    -> StarOrExp        {cons("Star")}
    Exp                                                    -> StarOrExp        
    "," String                                             -> Group-Concat-Sep {cons("Sep")}
    "DISTINCT"                                             -> Distinct         {cons("Distinct")}

  context-free syntax
    CONTENTCOMPLETE -> FunctionCall     {cons("COMPLETION-FunctionCall")}
    CONTENTCOMPLETE -> StarOrExp        {cons("COMPLETION-StarOrExp")}
    CONTENTCOMPLETE -> Group-Concat-Sep {cons("COMPLETION-Group-Concat-Sep")}
    CONTENTCOMPLETE -> Distinct         {cons("COMPLETION-Distinct")}