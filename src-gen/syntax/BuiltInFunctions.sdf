module BuiltInFunctions
imports Keywords Names Expressions PGQL Literals

exports
  context-free syntax
    LABEL "()"              -> InlinedCall {cons("Label")}
    ID "()"                 -> InlinedCall {cons("Id")}
    HAS "(" {Prop ","}* ")" -> InlinedCall {cons("Has")}
    INDEGREE "()"           -> InlinedCall {cons("InDegree")}
    OUTDEGREE "()"          -> InlinedCall {cons("OutDegree")}
    SRC "()"                -> InlinedCall {cons("Src")}
    DST "()"                -> InlinedCall {cons("Dst")}
    NODES "()"              -> InlinedCall {cons("Nodes")}
    EDGES "()"              -> InlinedCall {cons("Edges")}
    LENGTH "()"             -> InlinedCall {cons("Length")}

  context-free syntax
    CONTENTCOMPLETE -> InlinedCall {cons("COMPLETION-InlinedCall")}

  context-free syntax
    Exp "." LABEL "()"              -> FunctionCall {cons("Label")}
    Exp "." ID "()"                 -> FunctionCall {cons("Id")}
    Exp "." HAS "(" {Prop ","}* ")" -> FunctionCall {cons("Has")}

  context-free syntax
    CONTENTCOMPLETE -> FunctionCall {cons("COMPLETION-FunctionCall")}

  context-free syntax
    Exp "." INDEGREE "()"  -> FunctionCall {cons("InDegree")}
    Exp "." OUTDEGREE "()" -> FunctionCall {cons("OutDegree")}

  context-free syntax
    CONTENTCOMPLETE -> FunctionCall {cons("COMPLETION-FunctionCall")}

  context-free syntax
    Exp "." SRC "()" -> FunctionCall {cons("Src")}
    Exp "." DST "()" -> FunctionCall {cons("Dst")}

  context-free syntax
    CONTENTCOMPLETE -> FunctionCall {cons("COMPLETION-FunctionCall")}

  context-free syntax
    Exp "." NODES "()"  -> FunctionCall {cons("Nodes")}
    Exp "." EDGES "()"  -> FunctionCall {cons("Edges")}
    Exp "." LENGTH "()" -> FunctionCall {cons("Length")}

  context-free syntax
    CONTENTCOMPLETE -> FunctionCall {cons("COMPLETION-FunctionCall")}

  context-free syntax
    Exp "." HEAD "()" -> FunctionCall {cons("Head")}
    Exp "." LAST "()" -> FunctionCall {cons("Last")}
    Exp "." INIT "()" -> FunctionCall {cons("Init")}
    Exp "." TAIL "()" -> FunctionCall {cons("Tail")}

  context-free syntax
    CONTENTCOMPLETE -> FunctionCall {cons("COMPLETION-FunctionCall")}

  context-free syntax
    Exp "." CONTAINS "(" Exp "," Exp ")"   -> FunctionCall {cons("Contains")}
    Exp "." BEGINSWITH "(" Exp "," Exp ")" -> FunctionCall {cons("BeginsWith")}
    Exp "." ENDSWITH "(" Exp "," Exp ")"   -> FunctionCall {cons("EndsWith")}

  context-free syntax
    CONTENTCOMPLETE -> FunctionCall {cons("COMPLETION-FunctionCall")}

  context-free syntax
    Exp "." BETWEEN "(" Exp "," Exp ")" -> FunctionCall {cons("Between")}
    Exp "." YEAR "()"                   -> FunctionCall {cons("Year")}
    Exp "." MONTH "()"                  -> FunctionCall {cons("Month")}
    Exp "." DAY "()"                    -> FunctionCall {cons("Day")}
    Exp "." HOURS "()"                  -> FunctionCall {cons("Hours")}
    Exp "." MINUTES "()"                -> FunctionCall {cons("Minutes")}
    Exp "." SECONDS "()"                -> FunctionCall {cons("Seconds")}
    Exp "." TIMEZONE "()"               -> FunctionCall {cons("Timezone")}

  context-free syntax
    CONTENTCOMPLETE -> FunctionCall {cons("COMPLETION-FunctionCall")}

  context-free syntax
    EXISTS GroupGraphPattern        -> FunctionCall {cons("ExistsFunc")}
    CASE Exp WhenThen+ ELSE Exp END -> FunctionCall {cons("Case")}
    WHEN Exp THEN Exp               -> WhenThen     {cons("WhenThen")}

  context-free syntax
    CONTENTCOMPLETE -> FunctionCall {cons("COMPLETION-FunctionCall")}
    CONTENTCOMPLETE -> WhenThen     {cons("COMPLETION-WhenThen")}

  context-free syntax
    COUNT "(" Distinct? StarOrExp ")"                    -> FunctionCall     {cons("COUNT")}
    MIN "(" Distinct? Exp ")"                            -> FunctionCall     {cons("MIN")}
    MAX "(" Distinct? Exp ")"                            -> FunctionCall     {cons("MAX")}
    SUM "(" Distinct? Exp ")"                            -> FunctionCall     {cons("SUM")}
    AVG "(" Distinct? Exp ")"                            -> FunctionCall     {cons("AVG")}
    GROUP-CONCAT "(" Distinct? Exp Group-Concat-Sep? ")" -> FunctionCall     {cons("GROUP-CONCAT")}
    "*"                                                  -> StarOrExp        {cons("Star")}
    Exp                                                  -> StarOrExp        
    "," String                                           -> Group-Concat-Sep {cons("Sep")}
    DISTINCT                                             -> Distinct         {cons("Distinct")}

  context-free syntax
    CONTENTCOMPLETE -> FunctionCall     {cons("COMPLETION-FunctionCall")}
    CONTENTCOMPLETE -> StarOrExp        {cons("COMPLETION-StarOrExp")}
    CONTENTCOMPLETE -> Group-Concat-Sep {cons("COMPLETION-Group-Concat-Sep")}