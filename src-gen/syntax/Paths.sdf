
module Paths
imports Keywords Literals Names Expressions BuiltInFunctions

exports
  context-free syntax
    Node EdgeNode+ VarAssign?                     -> Path                  {cons("Path")}
    "(" ElemContents2? ")"                        -> Path                  {cons("SingleNode")}
    "(" ElemContents ")"                          -> Node                  {cons("Node")}
    VARNAME                                       -> Node                  {cons("SimpleNode")}
    Edge Node                                     -> EdgeNode              {cons("EdgeNode")}
    "-" EdgeContents? PathLengthConstraints? "->" -> Edge                  {cons("EdgeOut")}
    "<-" PathLengthConstraints? EdgeContents? "-" -> Edge                  {cons("EdgeIn")}
    "->"                                          -> Edge                  {cons("EdgeOut")}
    "<-"                                          -> Edge                  {cons("EdgeIn")}
    "-" EdgeContents? PathLengthConstraints? "-"  -> Edge                  {cons("EdgeNoDir")}
    "[" ElemContents "]"                          -> EdgeContents          {cons("EdgeContents")}
    "{" PathConstraint "}"                        -> PathLengthConstraints {cons("PathLengthConstraints")}
    INTEGER? ".." INTEGER?                        -> PathConstraint        {cons("PathLength")}

  context-free syntax
    CONTENTCOMPLETE -> Path                  {cons("COMPLETION-Path")}
    CONTENTCOMPLETE -> Node                  {cons("COMPLETION-Node")}
    CONTENTCOMPLETE -> EdgeNode              {cons("COMPLETION-EdgeNode")}
    CONTENTCOMPLETE -> Edge                  {cons("COMPLETION-Edge")}
    CONTENTCOMPLETE -> EdgeContents          {cons("COMPLETION-EdgeContents")}
    CONTENTCOMPLETE -> PathLengthConstraints {cons("COMPLETION-PathLengthConstraints")}
    CONTENTCOMPLETE -> PathConstraint        {cons("COMPLETION-PathConstraint")}

  context-free syntax
    VARNAME? Labels? Ids? WithInlinedConstraints? -> ElemContents           {cons("ElemContents")}
    VARNAME? Labels? Ids? WithInlinedConstraints  -> ElemContents2          {cons("ElemContents2")}
    ":" ExpressionOrAltLit                        -> Labels                 {cons("Labels")}
    "@" ExpressionOrAltLit                        -> Ids                    {cons("Ids")}
    Exp                                           -> ExpressionOrAltLit     
    AltLit                                        -> ExpressionOrAltLit     {prefer}
    WITH {InlinedExp ","}+                        -> WithInlinedConstraints {cons("Constraint")}

  context-free syntax
    CONTENTCOMPLETE -> ElemContents           {cons("COMPLETION-ElemContents")}
    CONTENTCOMPLETE -> ElemContents2          {cons("COMPLETION-ElemContents2")}
    CONTENTCOMPLETE -> Labels                 {cons("COMPLETION-Labels")}
    CONTENTCOMPLETE -> Ids                    {cons("COMPLETION-Ids")}
    CONTENTCOMPLETE -> ExpressionOrAltLit     {cons("COMPLETION-ExpressionOrAltLit")}
    CONTENTCOMPLETE -> WithInlinedConstraints {cons("COMPLETION-WithInlinedConstraints")}