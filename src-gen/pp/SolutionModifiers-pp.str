module src-gen/pp/SolutionModifiers-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  src-gen/signatures/SolutionModifiers-sig


imports
  src-gen/signatures/Keywords-sig
  src-gen/signatures/Names-sig
  src-gen/signatures/Literals-sig
  src-gen/signatures/Expressions-sig


imports
  src-gen/pp/Keywords-pp
  src-gen/pp/Names-pp
  src-gen/pp/Literals-pp
  src-gen/pp/Expressions-pp


strategies
  prettyprint-example =
    prettyprint-SolutionModifier

  prettyprint-example =
    prettyprint-SelectElems

  prettyprint-example =
    prettyprint-Star

  prettyprint-example =
    prettyprint-ExpOrStarAsVar

  prettyprint-example =
    prettyprint-DistinctOrReduced

  prettyprint-example =
    prettyprint-UngroupClause

  prettyprint-example =
    prettyprint-GroupClause

  prettyprint-example =
    prettyprint-HavingClause

  prettyprint-example =
    prettyprint-OrderClause

  prettyprint-example =
    prettyprint-OrderElem

  prettyprint-example =
    prettyprint-LimitOffsetClauses

  prettyprint-example =
    prettyprint-LimitClause

  prettyprint-example =
    prettyprint-OffsetClause

  prettyprint-SolutionModifier :
    SolutionModifier(t1__, t2__, t3__, t4__, t5__) -> [ H(
                                                          [SOpt(HS(), "0")]
                                                        , [t1__']
                                                        )
                                                      , H(
                                                          [SOpt(HS(), "0")]
                                                        , [t2__']
                                                        )
                                                      , H(
                                                          [SOpt(HS(), "0")]
                                                        , [t3__']
                                                        )
                                                      , H(
                                                          [SOpt(HS(), "0")]
                                                        , [t4__']
                                                        )
                                                      , H(
                                                          [SOpt(HS(), "0")]
                                                        , [t5__']
                                                        )
                                                      ]
    with t1__' := <pp-option(pp-one-Z(prettyprint-UngroupClause))> t1__
    with t2__' := <pp-option(pp-one-Z(prettyprint-GroupClause))> t2__
    with t3__' := <pp-option(pp-one-Z(prettyprint-HavingClause))> t3__
    with t4__' := <pp-option(pp-one-Z(prettyprint-OrderClause))> t4__
    with t5__' := <pp-option(pp-one-Z(prettyprint-LimitOffsetClauses))> t5__

  is-SolutionModifier =
    ?SolutionModifier(_, _, _, _, _)

  prettyprint-SelectElems :
    Vars(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [t1__']
                    )
                  ]
    with t1__' := <pp-H-list(prettyprint-ExpOrStarAsVar|", ")> t1__

  is-SelectElems =
    ?Vars(_)

  prettyprint-ExpOrStarAsVar :
    ExpAsVar(t1__, t2__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [t1__', t2__']
                              )
                            ]
    with t1__' := <pp-one-Z(prettyprint-Star)> t1__
    with t2__' := <pp-option(pp-one-Z(prettyprint-VarAssign))> t2__

  is-ExpOrStarAsVar =
    ?ExpAsVar(_, _)

  prettyprint-Star :
    Star() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("*")]
                )
              ]

  is-Star =
    ?Star()

  prettyprint-ExpOrStarAsVar :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-ExpOrStarAsVar)
    where t1__' := <pp-one-Z(prettyprint-ExpAsVar)> t1__

  prettyprint-DistinctOrReduced :
    Distinct() -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("DISTINCT ")]
                    )
                  ]

  is-DistinctOrReduced =
    ?Distinct()

  prettyprint-DistinctOrReduced :
    Reduced() -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("REDUCED ")]
                   )
                 ]

  is-DistinctOrReduced =
    ?Reduced()

  prettyprint-UngroupClause :
    UngroupClase(t1__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("UNGROUP "), t1__']
                            )
                          ]
    with t1__' := <pp-H-list(prettyprint-ExpAsVar|", ")> t1__

  is-UngroupClause =
    ?UngroupClase(_)

  prettyprint-GroupClause :
    GroupClause(t1__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("GROUP BY "), t1__']
                           )
                         ]
    with t1__' := <pp-H-list(prettyprint-ExpAsVar|", ")> t1__

  is-GroupClause =
    ?GroupClause(_)

  prettyprint-HavingClause :
    HavingClause(t1__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("HAVING "), t1__']
                            )
                          ]
    with t1__' := <pp-H-list(prettyprint-Exp)> t1__

  is-HavingClause =
    ?HavingClause(_)

  prettyprint-OrderClause :
    OrderClause(t1__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("ORDER BY "), t1__']
                           )
                         ]
    with t1__' := <pp-H-list(prettyprint-OrderElem|", ")> t1__

  is-OrderClause =
    ?OrderClause(_)

  prettyprint-OrderElem :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-OrderElem)
    where t1__' := <pp-one-Z(prettyprint-Exp)> t1__

  prettyprint-OrderElem :
    Asc1(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [ S("ASC(")
                      , t1__'
                      , S(")")
                      ]
                    )
                  ]
    with t1__' := <pp-one-Z(prettyprint-Exp)> t1__

  is-OrderElem =
    ?Asc1(_)

  prettyprint-OrderElem :
    Desc1(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [ S("DESC(")
                       , t1__'
                       , S(")")
                       ]
                     )
                   ]
    with t1__' := <pp-one-Z(prettyprint-Exp)> t1__

  is-OrderElem =
    ?Desc1(_)

  prettyprint-OrderElem :
    Asc2(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [t1__', S(" ASC")]
                    )
                  ]
    with t1__' := <pp-one-Z(prettyprint-Exp)> t1__

  is-OrderElem =
    ?Asc2(_)

  prettyprint-OrderElem :
    Desc2(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [t1__', S(" DESC")]
                     )
                   ]
    with t1__' := <pp-one-Z(prettyprint-Exp)> t1__

  is-OrderElem =
    ?Desc2(_)

  prettyprint-LimitOffsetClauses :
    LimitOffsetClauses(t1__, t2__) -> [ H(
                                          [SOpt(HS(), "0")]
                                        , [t1__', S(" "), t2__']
                                        )
                                      ]
    with t1__' := <pp-one-Z(prettyprint-LimitClause)> t1__
    with t2__' := <pp-option(pp-one-Z(prettyprint-OffsetClause))> t2__

  is-LimitOffsetClauses =
    ?LimitOffsetClauses(_, _)

  prettyprint-LimitOffsetClauses :
    OffsetLimitClauses(t1__, t2__) -> [ H(
                                          [SOpt(HS(), "0")]
                                        , [t1__', S(" "), t2__']
                                        )
                                      ]
    with t1__' := <pp-one-Z(prettyprint-OffsetClause)> t1__
    with t2__' := <pp-option(pp-one-Z(prettyprint-LimitClause))> t2__

  is-LimitOffsetClauses =
    ?OffsetLimitClauses(_, _)

  prettyprint-LimitClause :
    LimitClause(t1__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("LIMIT "), t1__']
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-INTEGER)> t1__

  is-LimitClause =
    ?LimitClause(_)

  prettyprint-OffsetClause :
    OffsetClause(t1__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("OFFSET "), t1__']
                            )
                          ]
    with t1__' := <pp-one-Z(prettyprint-INTEGER)> t1__

  is-OffsetClause =
    ?OffsetClause(_)

  is-SolutionModifier =
    fail

  is-SelectElems =
    fail

  is-Star =
    fail

  is-ExpOrStarAsVar =
    fail

  is-DistinctOrReduced =
    fail

  is-UngroupClause =
    fail

  is-GroupClause =
    fail

  is-HavingClause =
    fail

  is-OrderClause =
    fail

  is-OrderElem =
    fail

  is-LimitOffsetClauses =
    fail

  is-LimitClause =
    fail

  is-OffsetClause =
    fail