module src-gen/pp/PGQL-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  src-gen/signatures/PGQL-sig


imports
  src-gen/signatures/Layout-sig
  src-gen/signatures/Keywords-sig
  src-gen/signatures/Names-sig
  src-gen/signatures/Literals-sig
  src-gen/signatures/Expressions-sig
  src-gen/signatures/Paths-sig
  src-gen/signatures/SolutionModifiers-sig


imports
  src-gen/pp/Layout-pp
  src-gen/pp/Keywords-pp
  src-gen/pp/Names-pp
  src-gen/pp/Literals-pp
  src-gen/pp/Expressions-pp
  src-gen/pp/Paths-pp
  src-gen/pp/SolutionModifiers-pp


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-Start


strategies
  prettyprint-example =
    prettyprint-Start

  prettyprint-example =
    prettyprint-Query

  prettyprint-example =
    prettyprint-SelectClause

  prettyprint-example =
    prettyprint-FromClause

  prettyprint-example =
    prettyprint-MatchClause

  prettyprint-example =
    prettyprint-MatchElem

  prettyprint-Start :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Start)
    where t1__' := <pp-one-Z(prettyprint-Query)> t1__

  prettyprint-Query :
    Query(t1__, t2__, t3__, t4__) -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [t1__']
                                       )
                                     , H(
                                         [SOpt(HS(), "0")]
                                       , [t2__']
                                       )
                                     , H(
                                         [SOpt(HS(), "0")]
                                       , [t3__']
                                       )
                                     , H(
                                         [SOpt(HS(), "0")]
                                       , [t4__']
                                       )
                                     ]
    with t1__' := <pp-one-Z(prettyprint-SelectClause)> t1__
    with t2__' := <pp-option(pp-one-Z(prettyprint-FromClause))> t2__
    with t3__' := <pp-one-Z(prettyprint-MatchClause)> t3__
    with t4__' := <pp-one-Z(prettyprint-SolutionModifier)> t4__

  is-Query =
    ?Query(_, _, _, _)

  prettyprint-SelectClause :
    SelectClause(t1__, t2__, t3__) -> [ H(
                                          [SOpt(HS(), "0")]
                                        , [t1__', S(" "), t2__', t3__']
                                        )
                                      ]
    with t1__' := <pp-one-Z(prettyprint-SELECT)> t1__
    with t2__' := <pp-option(pp-one-Z(prettyprint-Distinct))> t2__
    with t3__' := <pp-one-Z(prettyprint-SelectElems)> t3__

  is-SelectClause =
    ?SelectClause(_, _, _)

  prettyprint-FromClause :
    FromClause(t1__, t2__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [t1__', S(" "), t2__']
                                )
                              ]
    with t1__' := <pp-one-Z(prettyprint-FROM)> t1__
    with t2__' := <pp-one-Z(prettyprint-GRAPHNAME)> t2__

  is-FromClause =
    ?FromClause(_, _)

  prettyprint-MatchClause :
    GraphPattern1(t1__, t2__) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [t1__']
                                   )
                                 , t2__'
                                 ]
    with t1__' := <pp-one-Z(prettyprint-WHERE)> t1__
    with t2__' := <pp-indent(|"2")> [ <pp-V-list(prettyprint-MatchElem|"0", ",")> t2__
                                    ]

  is-MatchClause =
    ?GraphPattern1(_, _)

  prettyprint-MatchElem :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-MatchElem)
    where t1__' := <pp-one-Z(prettyprint-Path)> t1__

  prettyprint-MatchElem :
    Constraint(t1__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [t1__']
                          )
                        ]
    with t1__' := <pp-one-Z(prettyprint-Exp)> t1__

  is-MatchElem =
    ?Constraint(_)

  is-Start =
    fail

  is-Query =
    fail

  is-SelectClause =
    fail

  is-FromClause =
    fail

  is-MatchClause =
    fail

  is-MatchElem =
    fail