module src-gen/completions/BuiltInFunctions-esv

imports
  src-gen/completions/Keywords-esv
  src-gen/completions/Names-esv
  src-gen/completions/Expressions-esv
  src-gen/completions/PGQL-esv
  src-gen/completions/Literals-esv

completions
  completion template InlinedCall : "has()" =
    "has(" <:Prop> ")"  
  completion template InlinedCall : "inDegree()" =
    "inDegree()"  
  completion template InlinedCall : "outDegree()" =
    "outDegree()"  
  completion template InlinedCall : "src()" =
    "src()"  
  completion template InlinedCall : "dst()" =
    "dst()"  
  completion template InlinedCall : "nodes()" =
    "nodes()"  
  completion template InlinedCall : "edges()" =
    "edges()"  
  completion template InlinedCall : "length()" =
    "length()"  
  completion template InlinedCall : "weight()" =
    "weight()"  

completions
  completion template FunctionCall : "Exp. has()" =
    <Exp:Exp> ". has(" <:Prop> ")"  

completions
  completion template FunctionCall : "Exp. inDegree()" =
    <Exp:Exp> ". inDegree()"  
  completion template FunctionCall : "Exp. outDegree()" =
    <Exp:Exp> ". outDegree()"  

completions
  completion template FunctionCall : "Exp. src()" =
    <Exp:Exp> ". src()"  
  completion template FunctionCall : "Exp. dst()" =
    <Exp:Exp> ". dst()"  

completions
  completion template FunctionCall : "Exp. nodes()" =
    <Exp:Exp> ". nodes()"  
  completion template FunctionCall : "Exp. edges()" =
    <Exp:Exp> ". edges()"  
  completion template FunctionCall : "Exp. length()" =
    <Exp:Exp> ". length()"  
  completion template FunctionCall : "Exp. weight()" =
    <Exp:Exp> ". weight()"  

completions
  completion template FunctionCall : "Exp. head()" =
    <Exp:Exp> ". head()"  
  completion template FunctionCall : "Exp. last()" =
    <Exp:Exp> ". last()"  
  completion template FunctionCall : "Exp. init()" =
    <Exp:Exp> ". init()"  
  completion template FunctionCall : "Exp. tail()" =
    <Exp:Exp> ". tail()"  

completions
  completion template FunctionCall : "Exp. contains(Exp, Exp)" =
    <Exp:Exp> ". contains(" <Exp:Exp> ", " <Exp:Exp> ")"  
  completion template FunctionCall : "Exp. beginsWith(Exp, Exp)" =
    <Exp:Exp> ". beginsWith(" <Exp:Exp> ", " <Exp:Exp> ")"  
  completion template FunctionCall : "Exp. endWith(Exp, Exp)" =
    <Exp:Exp> ". endWith(" <Exp:Exp> ", " <Exp:Exp> ")"  

completions
  completion template FunctionCall : "Exp. between(Exp, Exp)" =
    <Exp:Exp> ". between(" <Exp:Exp> ", " <Exp:Exp> ")"  
  completion template FunctionCall : "Exp. year()" =
    <Exp:Exp> ". year()"  
  completion template FunctionCall : "Exp. month()" =
    <Exp:Exp> ". month()"  
  completion template FunctionCall : "Exp. day()" =
    <Exp:Exp> ". day()"  
  completion template FunctionCall : "Exp. hours()" =
    <Exp:Exp> ". hours()"  
  completion template FunctionCall : "Exp. minutes()" =
    <Exp:Exp> ". minutes()"  
  completion template FunctionCall : "Exp. seconds()" =
    <Exp:Exp> ". seconds()"  
  completion template FunctionCall : "Exp. timezone()" =
    <Exp:Exp> ". timezone()"  

completions
  completion template FunctionCall : "EXISTS GroupGraphPattern" =
    "EXISTS " <GroupGraphPattern:GroupGraphPattern>  
  completion template FunctionCall : "CASE Exp WhenThen ELSE Exp END" =
    "CASE " <Exp:Exp> " " <WhenThen:WhenThen> " ELSE " <Exp:Exp> " END"  
  completion template WhenThen : "WHEN Exp THEN Exp" =
    "WHEN " <Exp:Exp> " THEN " <Exp:Exp>  

completions
  completion template FunctionCall : "COUNT(StarOrExp)" =
    "COUNT(" <:Distinct> <StarOrExp:StarOrExp> ")"  
  completion template FunctionCall : "MIN(Exp)" =
    "MIN(" <:Distinct> <Exp:Exp> ")"  
  completion template FunctionCall : "MAX(Exp)" =
    "MAX(" <:Distinct> <Exp:Exp> ")"  
  completion template FunctionCall : "SUM(Exp)" =
    "SUM(" <:Distinct> <Exp:Exp> ")"  
  completion template FunctionCall : "AVG(Exp)" =
    "AVG(" <:Distinct> <Exp:Exp> ")"  
  completion template FunctionCall : "GROUP_CONCAT(Exp)" =
    "GROUP_CONCAT(" <:Distinct> <Exp:Exp> <:Group-Concat-Sep> ")"  
  completion template StarOrExp : "*" =
    "*"                    
  completion template Group-Concat-Sep : ", String" =
    ", " <String:String>  
  completion template Distinct : "DISTINCT" =
    "DISTINCT"       