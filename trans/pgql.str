module pgql

imports
  
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  src-gen/signatures/-
  src-gen/pp/-
  lib/editor-common.generated
  runtime/analysis/-
  runtime/nabl/-
  runtime/task/-
  runtime/index/-
  runtime/tmpl/-
  runtime/editor/-
  normalize
  names
  check
  pp
//  generate/-
  editor/PGQL-Outliner
//  text-to-model/t2m
//  text-to-model/PGQL-Graph
//  text-to-model/m2t
  signatures
//  example-metadata
  example-schema
  normalizeForNaBL
  
rules // Non-generated

//   nabl-constraint(|ctx):
//     e@"nama" -> <fail>
//     where
//       failtask := <task-create-fail(|ctx)>;
//       <task-create-error-on-failure(|ctx, failtask, "The property 'nama' is undefined for nodes of type 'function'")> e
// 
//   nabl-constraint(|ctx):
//     e@"25" -> <fail>
//     where
//       failtask := <task-create-fail(|ctx)>;
//       <task-create-error-on-failure(|ctx, failtask, "Type mismatch: cannot convert from int to String")> e

  normalize-builder:
    (_, _, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"normalized.aterm")> path;
      result   := <normalize> ast
      
  nabl-input-builder:
    (_, _, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"nabl.aterm")> path;
      result   := <normalize-pgql> ast

  pretty-print-builder:
    (_, _, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"pp.pgql")> path;
      result   := <print-it-pretty> ast
  
  print-it-pretty:
    term -> text
    where
      text := <box2text-string(|100)> <!V([], <id>)> <prettyprint-example> term
      
  parenthesize = fail
  override-reconstruction = fail
  resugar = fail
    
  /*    
  ASTtext-to-ASTgraph-builder:
    (_, _, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"ASTgraph.aterm")> path;
      result   := <ASTtext-to-ASTgraph> ast

  ASTtext-to-ASTgraph-no-annos-builder:
    (_, _, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"ASTgraph.aterm")> path;
      result   := <ASTtext-to-ASTgraph; strip-annos> ast
      
  ASTtext-to-model-builder:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"model.aterm")> path;
      result   := <tree2model> (ast, None())

  generate-cc-builder:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"cc")> path;
      result := <normalize; g-normalize; generate; to-cpp> TopNode(ast, <metadata>)
  
  generate-cc = strip-annos; g-normalize; generate; to-cpp

  generate-cc-intermediate-builder:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"cc.aterm")> path;
      result := <normalize; g-normalize; generate> TopNode(ast, <metadata>)
      
  pgx-execute-builder:
    (selected, position, TopNode(ast, _, _), path, project-path) -> None()
    with
      numVars := <collect-one(?Refs(<id>); length)> ast;
      text := <origin-text> ast;
      <foreign-call(|"SPARQL","hello")> (text, numVars)
  */
  // external prepare-for-result(|path, project-path)
  // external eval-query(|project-path, path)
  // external visualize(|path, project-path)
  // external parse-output(|)
  // external connect(|)
  // external disconnect(|)
  // external remote-exec(|)
  // external kill-process(|)

//   connect-builder:
//     (selected, position, ast, path, project-path) -> None()
//     where
//     	<connect> 0
// 
//   connect-through-gateway-builder:
//     (selected, position, ast, path, project-path) -> None()
//     where
//     	<connect> 1
//     	
//   disconnect-builder:
//     (selected, position, ast, path, project-path) -> None()
//     where
//     	<disconnect> None()  
// 
//   remote-exec-builder:
//     (selected, position, ast, path, project-path) -> None()
//     where
//     	<remote-exec> None()
//     	
//   kill-builder:
//     (selected, position, ast, path, project-path) -> None()
//     where
//     	<kill-process> None()
    	
//   evaluate-builder:
//     (selected, position, ast, path, project-path) -> result
//     with
//       out-file := <guarantee-extension(|"out")> path;
//       out := <evaluate-helper> (ast, path, project-path);
//       if (None() := out)
//       then result := None()
//       else result := (out-file, out)
//       end
// 
//   evaluate-and-visualize-builder:
//     (selected, position, ast, path, project-path) -> None()
//     with
//       prepare-for-result(|path, project-path);
//       out-file := <guarantee-extension(|"out")> path;
//       out := <evaluate-helper> (ast, path, project-path);
//       <(parse-output <+ !None()); visualize(|path, project-path)> out
//       
//   evaluate-helper:
//   	(ast, path, project-path) -> out
//     where
//       cc-file := <guarantee-extension(|"cc")> path;
//       cc := <g-normalize; generate; to-cc> ast;
//       handle := <fopen> (cc-file, "w");
//       <fputs> (cc, handle);
//       fclose;
//       out := <eval-query(|project-path, <guarantee-extension(|"")> path)> cc

  // visualize-builder:
  //   (selected, position, ast, path, project-path) -> None()
  //   with
  //     prepare-for-result(|path, project-path);
  //     out-file := <guarantee-extension(|"out")> path;
  //     <((read-text-file; parse-output) <+ !None()); visualize(|path, project-path)> out-file


//  fake-execute-builder = foreign-call(|"SPARQL","fake-execute-builder")

rules // Analysis
  
  editor-analyze = analysis-default-editor
  
  analysis-single-default-interface =
    analysis-single-default(normalize-pgql, id, id|<language>)
  analysis-multiple-default-interface =
    analysis-multiple-default(sunshine-parse-file <+ !(), normalize-pgql, id, id|<language>, <project-path>)
  
  sunshine-parse-file = prim("SSL_EXT_parse_file")
  
  editor-save = analysis-save-default(|<language>)

rules
  
  // command-line
  normalize-pgql =
    ?TopNode(normalizedAst, schema); !TopNode(normalizedAst, <try(is-string; read-from-string)> schema); normalizeForNaBL

  // editor
  normalize-pgql = 
    not(?TopNode(_, _)); try(normalize); !TopNode(<id>, <example-schema>); normalizeForNaBL

rules // Editor services
	
	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	editor-resolve:
		(node, position, ast, path, project-path) -> definition
		where
			definition := <analysis-resolve(|<language>, project-path)> node

	// Returns "hover help" information for a particular node in the editor.
	// For references, this rule is invoked using the resolved term.
	editor-hover:
		(target, position, ast, path, project-path) ->
			<get-editor-properties(pp-PGQL-string |<language>, project-path);properties-to-html>target

	// Gathers the properties for the properties view.
	editor-properties:
		(target, position, ast, path, project-path) ->
			<get-editor-properties(pp-PGQL-string |<language>, project-path)>target

	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	editor-complete:
		(node, position, ast, path, project-path) -> proposals
		where
			proposals := <analysis-propose-completions(|<language>, project-path); remove-all(string-starts-with(|"unnamed"))> ast
	
	// Formats the program using a pretty printer		
  editor-format:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    	ext      := <get-extension> path;
      filename := <guarantee-extension(|$[pp.[ext]])> path;
      result   := <pp-debug> selected

  editor-outline:
    (node, position, ast, path, project-path) -> outline
    where
      outline := <simple-label-outline(to-outline-label)> ast
      
rules // Debugging
	
	// Prints the abstract syntax ATerm of a selection.
	debug-show-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"aterm")> path;
			result	 := selected
			
  print-ast = debug-show-aterm; ?(filename, result); !(filename, <write-to-string> result)
			
	// Prints the analyzed annotated abstract syntax ATerm of a selection.
	debug-show-analyzed:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"analyzed.aterm")> path;
			result	 := ast
			
	debug-index-project =
		analysis-debug-index-project(|<language>)
	debug-index-project-resolve = 
		analysis-debug-index-project-resolve(|<language>)
	debug-index-partition =
		analysis-debug-index-partition(|<language>)

	debug-task-project =
		analysis-debug-task-project(|<language>)
	debug-task-partition =
		analysis-debug-task-partition(|<language>)
	debug-task-selection =
		analysis-debug-task-selection(|<language>)
		
	debug-project =
		analysis-debug-project(|<language>)
	debug-partition =
		analysis-debug-partition(|<language>)
		
	debug-reanalyze = 
		analysis-debug-reanalyze(|<language>)
