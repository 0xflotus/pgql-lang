module pgql

imports
  
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  src-gen/signatures/-
  src-gen/pp/-
  lib/editor-common.generated
  runtime/analysis/-
  runtime/nabl/-
  runtime/task/-
  runtime/index/-
  runtime/tmpl/-
  runtime/editor/-
  normalize
  names
  check
  pp
  editor/PGQL-Outliner
  common
  sig-nabl
  trans-for-nabl
  example-schema

rules // Analysis
  
  editor-analyze = analysis-default-editor
  
  analysis-single-default-interface =
    analysis-single-default(normalize-pgql, id, id|<language>)
  analysis-multiple-default-interface =
    analysis-multiple-default(sunshine-parse-file <+ !(), normalize-pgql, id, id|<language>, <project-path>)
  
  sunshine-parse-file = prim("SSL_EXT_parse_file")
  
  editor-save = analysis-save-default(|<language>)
  parenthesize = fail
  override-reconstruction = fail
  resugar = fail
  
rules
  
  // invoked by PGX engine
  normalize-pgql =
    ?TopNode(normalizedAst, schema); !TopNode(normalizedAst, <try(is-string; read-from-string)> schema); transForNaBL

  // invoked by Spoofax editor
  normalize-pgql = 
    not(?TopNode(_, _)); try(normalize); !TopNode(<id>, <example-schema>); transForNaBL
    
rules // Menu actions

  normalize-builder:
    (_, _, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"normalized.aterm")> path;
      result   := <normalize> ast
      
  nabl-input-builder:
    (_, _, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"nabl.aterm")> path;
      result   := <normalize-pgql> ast

  pretty-print-builder:
    (_, _, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"pp.pgql")> path;
      result   := <print-it-pretty> ast

rules // Editor services (this is generated code)
	
	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	editor-resolve:
		(node, position, ast, path, project-path) -> definition
		where
			definition := <analysis-resolve(|<language>, project-path)> node

	// Returns "hover help" information for a particular node in the editor.
	// For references, this rule is invoked using the resolved term.
	editor-hover:
		(target, position, ast, path, project-path) ->
			<get-editor-properties(pp-PGQL-string |<language>, project-path);properties-to-html>target

	// Gathers the properties for the properties view.
	editor-properties:
		(target, position, ast, path, project-path) ->
			<get-editor-properties(pp-PGQL-string |<language>, project-path)>target

	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	editor-complete:
		(node, position, ast, path, project-path) -> proposals
		where
			proposals := <analysis-propose-completions(|<language>, project-path); remove-all(string-starts-with(|"unnamed"))> ast
	
	// Formats the program using a pretty printer		
  editor-format:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    	ext      := <get-extension> path;
      filename := <guarantee-extension(|$[pp.[ext]])> path;
      result   := <pp-debug> selected

  editor-outline:
    (node, position, ast, path, project-path) -> outline
    where
      outline := <simple-label-outline(to-outline-label)> ast
      
rules // Debugging (this is generated code)
	
	// Prints the abstract syntax ATerm of a selection.
	debug-show-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"aterm")> path;
			result	 := selected
			
  print-ast = debug-show-aterm; ?(filename, result); !(filename, <write-to-string> result)
			
	// Prints the analyzed annotated abstract syntax ATerm of a selection.
	debug-show-analyzed:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"analyzed.aterm")> path;
			result	 := ast
			
	debug-index-project =
		analysis-debug-index-project(|<language>)
	debug-index-project-resolve = 
		analysis-debug-index-project-resolve(|<language>)
	debug-index-partition =
		analysis-debug-index-partition(|<language>)

	debug-task-project =
		analysis-debug-task-project(|<language>)
	debug-task-partition =
		analysis-debug-task-partition(|<language>)
	debug-task-selection =
		analysis-debug-task-selection(|<language>)
		
	debug-project =
		analysis-debug-project(|<language>)
	debug-partition =
		analysis-debug-partition(|<language>)
		
	debug-reanalyze = 
		analysis-debug-reanalyze(|<language>)
