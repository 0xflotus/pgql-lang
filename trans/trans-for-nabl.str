module trans-for-nabl

imports
  
  src-gen/signatures/-
  sig-normalized
  sig-nabl
  common
  
/*
 * normalizeForNaBL is called after normalize. It's for extra transformations to get the AST in a shape that NaBL likes.
 *   PGQL -> PGQL AST -> PGQL norm. AST -> PGQL AST for NaBL ==> NaBL
 *                                      -> QueryGraph object ==> query planner
 */
rules
  
  transForNaBL = alltd(transForNaBL-groupBy)
  
rules
  
  transForNaBL-groupBy:
    Query(fromClause, graphPattern, matchOrderHint, Select(distinctOrReduced, expAsVars, groupBy, having, orderBy, limitOffsets)) ->
    Query(fromClause, graphPattern, matchOrderHint, Select(distinctOrReduced, expAsVars', groupBy', having, orderBy', limitOffsets))
    where
      // if (1) there is a GROUP BY or (2) there are aggregates in the SELECT, then all variables
      // in the SELECT and ORDER BY need to be group keys or need to be inside aggregates
      !groupBy; ?Some(_) + !expAsVars; oncetd(is-aggregate)
    with
      expAsVars' := <to-varOrGroupRefs> expAsVars;
      orderBy' := <to-groupRefs> orderBy;
      groupBy' := <to-groupDefs> groupBy
  
  to-varOrGroupRefs = alltd(is-aggregate <+ ?VarRef(<id>); !GroupRef(<id>))
 
  to-groupRefs = alltd(is-aggregate <+ ?VarRef(<id>); !SelectOrGroupRef(<id>))
  
  to-groupDefs = alltd(to-groupDef)
  to-groupDef = ?ExpAsVar(v, exp); !ExpAsGroupVar(v, exp)
