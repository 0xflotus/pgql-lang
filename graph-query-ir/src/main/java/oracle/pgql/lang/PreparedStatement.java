/**
 * Copyright (C) 2013 - 2017 Oracle and/or its affiliates. All rights reserved.
 */
package oracle.pgql.lang;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;

/**
 * An object that represents a precompiled PGQL statement.
 * 
 * A PGQL statement is precompiled and stored in a PreparedStatement object. This object can then be used to efficiently
 * execute this statement multiple times.
 *
 */
public interface PreparedStatement extends AutoCloseable {

  /**
   * Executes the PGQL query in this PreparedStatement object and returns the ResultSet object generated by the query.
   * 
   * @return a ResultSet object that contains the data produced by the query; never null
   */
  ResultSet executeQuery() throws PgqlException;

  /**
   * Sets the designated parameter to the given Java boolean value.
   * 
   * @param parameterIndex
   *          the first parameter is 1, the second is 2, ...
   * @param x
   *          the parameter value
   */
  void setBoolean(int parameterIndex, boolean x) throws PgqlException;

  /**
   * Sets the designated parameter to the given Java double value.
   * 
   * @param parameterIndex
   *          the first parameter is 1, the second is 2, ...
   * @param x
   *          the parameter value
   */
  void setDouble(int parameterIndex, double x) throws PgqlException;

  /**
   * Sets the designated parameter to the given Java float value.
   * 
   * @param parameterIndex
   *          the first parameter is 1, the second is 2, ...
   * @param x
   *          the parameter value
   */
  void setFloat(int parameterIndex, float x) throws PgqlException;

  /**
   * Sets the designated parameter to the given Java int value.
   * 
   * @param parameterIndex
   *          the first parameter is 1, the second is 2, ...
   * @param x
   *          the parameter value
   */
  void setInt(int parameterIndex, int x) throws PgqlException;

  /**
   * Sets the designated parameter to the given Java long value.
   * 
   * @param parameterIndex
   *          the first parameter is 1, the second is 2, ...
   * @param x
   *          the parameter value
   */
  void setLong(int parameterIndex, long x) throws PgqlException;

  /**
   * Sets the designated parameter to the given Java String value.
   * 
   * @param parameterIndex
   *          the first parameter is 1, the second is 2, ...
   * @param x
   *          the parameter value
   */
  void setString(int parameterIndex, String x) throws PgqlException;

  /**
   * Sets the designated parameter to the given Java LocalDate value.
   *
   * @param parameterIndex
   *          the first parameter is 1, the second is 2, ...
   * @param x
   *          the parameter value
   */
  void setDate(int parameterIndex, LocalDate x) throws PgqlException;

  /**
   * Sets the designated parameter to the given Java LocalTime value.
   *
   * @param parameterIndex
   *          the first parameter is 1, the second is 2, ...
   * @param x
   *          the parameter value
   */
  void setTime(int parameterIndex, LocalTime x) throws PgqlException;

  /**
   * Sets the designated parameter to the given Java LocalDateTime value.
   *
   * @param parameterIndex
   *          the first parameter is 1, the second is 2, ...
   * @param x
   *          the parameter value
   */
  void setTimestamp(int parameterIndex, LocalDateTime x) throws PgqlException;

  /**
   * Releases this statement's resources. Calling the method close on a Statement object that is already closed has no
   * effect.
   * 
   * Note: When a statement is closed, its associated ResultSet objects are also closed.
   */
  @Override
  void close() throws PgqlException;
}
