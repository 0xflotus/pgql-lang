module Literals

context-free syntax

  Literal   = NumericLiteral
  Literal   = BooleanLiteral
  Literal   = String
  Literal   = BindVariable
  Literal   = Date
  Literal   = Time
  Literal   = Timestamp

  AltLit.Or = <<AltLit>|<AltLit>> {left}
  AltLit    = Literal
  AltLit    = UnquotedString

context-free syntax

  NumericLiteral.Integer    = UNSIGNED-INT
  NumericLiteral.Decimal    = UNSIGNED-DECIMAL
  String.String             = STRING
  UnquotedString.String     = UNQUOTED-STRING
  BooleanLiteral.True       = <true> {case-insensitive}
  BooleanLiteral.False      = <false> {case-insensitive}
  Literal.Null              = <null> {case-insensitive}
  BindVariable.BindVariable = <?>
  Date.Date                 = <date <DATE-TIME-STRING>> {case-insensitive}
  Time.Time                 = <time <DATE-TIME-STRING>> {case-insensitive}
  Timestamp.Timestamp       = <timestamp <DATE-TIME-STRING>> {case-insensitive}

lexical syntax

  UNSIGNED-INT         = [0-9]+
  UNSIGNED-DECIMAL     = [0-9]* "." [0-9]+

  STRING               = SINGLE-QUOTED-STRING | DOUBLE-QUOTED-STRING
  SINGLE-QUOTED-STRING = "'" (~[\'\n\\] | ESCAPE-CHAR)* "'"
  DOUBLE-QUOTED-STRING = '"' (~[\"\n\\] | ESCAPE-CHAR)* '"'
  ESCAPE-CHAR          = "\\" [tbnrf\\\"\']

  UNQUOTED-STRING      = [a-zA-Z][a-zA-Z0-9\_]*

  DATE-TIME-STRING     = SINGLE-QUOTED-STRING

  DATA-TYPE            = [a-zA-Z][a-zA-Z0-9\_\ ]*

lexical restrictions // greedy matching

  UNSIGNED-INT     -/- [0-9]
  UNSIGNED-DECIMAL -/- [0-9]
  UNQUOTED-STRING  -/- [a-zA-Z0-9\_]

lexical syntax

  UNQUOTED-STRING = [Tt][Rr][Uu][Ee] {reject}
  UNQUOTED-STRING = [Ff][Aa][Ll][Ss][Ee] {reject}
  UNQUOTED-STRING = [Nn][Uu][Ll][Ll] {reject}
