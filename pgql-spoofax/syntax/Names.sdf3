module Names

imports

  Literals
  Expressions
  
context-free syntax
  
  VarDef.VarDef = <<Var>>
  VarRef.VarRef = <<Var>>
  ExpAsVar.ExpAsVar = <<Exp><VarAssign?>>
  VarAssign.VarAssign = <as <VarDef>> {case-insensitive}
  NodeVarRef.NodeVarRef = <<Var>>
  PropRef.PropRef = <<VarRef>.<Prop>>

  Var = VARNAME
  
  Prop = PROPNAME
  Prop = STRING
  Dot.Dot = <.>
  
lexical syntax
  
  GRAPHNAME = NAME
  VARNAME   = NAME
  PROPNAME  = NAME
  NAME      = [a-zA-Z][a-zA-Z0-9\_]*
  
lexical syntax // reserved keywords

  NAME = [Ss][Ee][Ll][Ee][Cc][Tt] {reject}
  NAME = [Ww][Hh][Ee][Rr][Ee] {reject}
  NAME = [Aa][Ss] {reject}
  NAME = [Ww][Ii][Tt][Hh] {reject}
  NAME = [Oo][Rr][Dd][Ee][Rr] {reject}
  NAME = [Gg][Rr][Oo][Uu][Pp] {reject}
  NAME = [Bb][Yy] {reject}
  NAME = [Aa][Ss][Cc] {reject}
  NAME = [Dd][Ee][Ss][Cc] {reject}
  NAME = [Ll][Ii][Mm][Ii][Tt] {reject}
  NAME = [Oo][Ff][Ff][Ss][Ee][Tt] {reject}
  NAME = [Aa][Nn][Dd] {reject}
  NAME = [Oo][Rr] {reject}
  NAME = [Tt][Rr][Uu][Ee] {reject}
  NAME = [Ff][Aa][Ll][Ss][Ee] {reject}
  NAME = [Nn][Uu][Ll][Ll] {reject}
  
lexical restrictions // greedy matching

  NAME -/- [a-zA-Z0-9\_]
