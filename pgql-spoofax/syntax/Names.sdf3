module Names

imports

  Literals
  Expressions
  
context-free syntax
  
  VarDef.VarDef = <<Var>>
  VarRef.VarRef = <<Var>>
  ExpAsVar.ExpAsVar = <<Exp><VarAssign?>>
  VarAssign.VarAssign = < as <VarDef>> {case-insensitive}
  PropRef.PropRef = <<VarRef>.<Prop>>

  Var = VARNAME
  
  Prop = PROPNAME
  Prop = STRING
  Dot.Dot = <.>
  
lexical syntax
  
  GRAPHNAME       = NAME
  VARNAME         = NAME
  PROPNAME        = NAME
  PATHPATTERNNAME = NAME
  NAME            = [a-zA-Z][a-zA-Z0-9\_]*
  FUNCTION-NAME   = NAME
  
lexical syntax // reserved keywords

  NAME = 'path' {reject}
  NAME = 'select' {reject}
  NAME = 'where' {reject}
  NAME = 'as' {reject}
  NAME = 'with' {reject}
  NAME = 'order' {reject}
  NAME = 'group' {reject}
  NAME = 'by' {reject}
  NAME = 'asc' {reject}
  NAME = 'desc' {reject}
  NAME = 'limit' {reject}
  NAME = 'offset' {reject}
  NAME = 'and' {reject}
  NAME = 'or' {reject}
  NAME = 'true' {reject}
  NAME = 'false' {reject}
  NAME = 'null' {reject}
  NAME = 'not' {reject}

  FUNCTION-NAME = 'count' {reject}
  FUNCTION-NAME = 'min' {reject}
  FUNCTION-NAME = 'max' {reject}
  FUNCTION-NAME = 'sum' {reject}
  FUNCTION-NAME = 'avg' {reject}
  FUNCTION-NAME = 'exists' {reject}
  FUNCTION-NAME = 'asc' {reject}
  FUNCTION-NAME = 'desc' {reject}

lexical restrictions // greedy matching

  NAME -/- [a-zA-Z0-9\_]
