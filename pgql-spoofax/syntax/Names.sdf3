module Names

imports

  Literals

context-free syntax

  VarDef.VarDef = IDENTIFIER
  VarRef.VarRef = IDENTIFIER
  VarAssign.VarAssign = < as <VarDef>> {case-insensitive}
  PropRef.PropRef = <<VarRef>.<Prop>>

  Prop = Identifier
  Prop = STRING

  Identifier = IDENTIFIER
  Identifier = DOUBLE-QUOTED-STRING

lexical syntax

  IDENTIFIER = [a-zA-Z][a-zA-Z0-9\_]*
  IDENTIFIER = 'true' {reject}
  IDENTIFIER = 'false' {reject}

  DOUBLE-QUOTED-STRING = '"' (~[\"\n\\] | ESCAPE-CHAR)* '"'
  ESCAPE-CHAR          = "\\" [tbnrf\\\"\']

  DATA-TYPE            = [a-zA-Z][a-zA-Z0-9\_\ ]*

lexical restrictions // greedy matching

  IDENTIFIER -/- [a-zA-Z0-9\_]
