module BuiltInFunctions

imports
  
  Names
  Expressions
  pgql-lang
  Literals

context-free syntax // inlined function calls

  InlinedCall.Label = <<Obj>label()> {case-insensitive}
  InlinedCall.Labels = <<Obj>labels()> {case-insensitive}
  InlinedCall.HasLabel = <<Obj>hasLabel(<Exp>)> {case-insensitive}
  InlinedCall.Id = <<Obj>id()> {case-insensitive}
  InlinedCall.Has = <<Obj>has(<{Exp ", "}*>)> {case-insensitive}
  InlinedCall.InDegree  = <<Obj>inDegree()> {case-insensitive}
  InlinedCall.OutDegree = <<Obj>outDegree()> {case-insensitive}
  
  Obj.Obj = <<VarRef><Dot>>
  Obj.Obj = <<Dot?>>

context-free syntax // vertices/edges

  Exp.Label = <<Exp>. label()> {case-insensitive}
  Exp.Labels = <<Exp>. labels()> {case-insensitive}
  Exp.HasLabel = <<Exp>. hasLabel(<Exp>)> {case-insensitive}
  Exp.Id = <<Exp>. id()> {case-insensitive}
  Exp.Has = <<Exp>. has(<{Exp ", "}*>)> {case-insensitive}
  
context-free syntax // vertices

  Exp.InDegree  = <<Exp>. inDegree()> {case-insensitive}
  Exp.OutDegree = <<Exp>. outDegree()> {case-insensitive}
  
context-free syntax // Aggregates

  Exp.COUNT        = <count(<Distinct?><StarOrExp>)> {case-insensitive}
  Exp.MIN          = <min(<Distinct?><Exp>)> {case-insensitive}
  Exp.MAX          = <max(<Distinct?><Exp>)> {case-insensitive}
  Exp.SUM          = <sum(<Distinct?><Exp>)> {case-insensitive}
  Exp.AVG          = <avg(<Distinct?><Exp>)> {case-insensitive}
  
  StarOrExp.Star = <*>
  StarOrExp = <<Exp>>
  Group-Concat-Sep.Sep = <, <String>>
  Distinct.Distinct = <distinct> {case-insensitive}

context-free priorities

  {
    left:
      Exp.Label
      Exp.Labels
      Exp.HasLabel
      Exp.Id
      Exp.Has
      Exp.InDegree
      Exp.OutDegree
  }
  >
  {
    right:
      Exp.UMin
      Exp.Not1
  }
  >
  {
    left:
      Exp.Mul
      Exp.Div
      Exp.Mod
  }
  >
  {
    left:
      Exp.Add
      Exp.Sub
  }
  >
  {
    left:
      Exp.Eq
      Exp.Neq
      Exp.Gt
      Exp.Lt
      Exp.Gte
      Exp.Lte
      Exp.Regex
  }
  >
  {
    right:
      Exp.Not2
  }
  >
  {
    left:
      Exp.And
  }
  >
  {
    left:
      Exp.Or
  }

context-free priorities

  {
    left:
      InlinedCall.Label
      InlinedCall.Labels
      InlinedCall.HasLabel
      InlinedCall.Id
      InlinedCall.Has
      InlinedCall.InDegree
      InlinedCall.OutDegree
  }
  >
  {
    right:
      InlinedExp.UMin
      InlinedExp.Not1
  }
  >
  {
    left:
      InlinedExp.Mul
      InlinedExp.Div
      InlinedExp.Mod
  }
  >
  {
    left:
      InlinedExp.Add
      InlinedExp.Sub
  }
  >
  {
    left:
      InlinedExp.Eq
      InlinedExp.Neq
      InlinedExp.Gt
      InlinedExp.Lt
      InlinedExp.Gte
      InlinedExp.Lte
      InlinedExp.Regex
  }
  >
  {
    right:
      InlinedExp.Not2
  }
  >
  {
    left:
      InlinedExp.And
  }
  >
  {
    left:
      InlinedExp.Or
  }
