module Legacy

imports

  pgql-lang
  Names
  GraphPattern
  SolutionModifiers
  Literals
  Expressions

context-free syntax // pgql-lang

  Legacy10Query.Query =
    <
      <{CommonPathExpression "\n"}*>
      <SelectClause>
      <FromClause?>
      <Legacy10GraphPattern>
      <GroupByClause?>
      <OrderByClause?>
      <LimitOffsetClauses?>
    >

  Legacy10SelectClause.SelectClause = <select <Legacy10Projection>> {case-insensitive}
  Legacy10Projection.ExpAsVars = <<{ExpAsVar ", "}+>>
  Legacy10Projection.Star = <*>

lexical syntax

  LEGACY10-STRING = '"' (~[\"\n\\] | ESCAPE-CHAR)* '"'

context-free syntax // GraphPattern.sdf3

  Legacy10GraphPattern.GraphPattern = 
    <
      where
        <{Legacy10PatternElem ",\n"}+>
    > {case-insensitive}

  Legacy10PatternElem = PathPattern

  Legacy10PatternElem.Constraint = Exp {avoid} // see Expressions.sdf3. Note: 'avoid' disambiguates 'select * where (X.p1)' ('(X.p1)' can be a Constraint or a Vertex)

  Vertex.VertexWithoutBrackets = <<IDENTIFIER>> // deprecated

  Legacy10Ids.Ids = <@<AltLit>>
  Legacy10WithInlinedConstraints.Constraint = < with <{Legacy10InlinedExp ", "}+>> {case-insensitive}

context-free syntax // SolutionModifiers

  OrderElem.Legacy10Asc = <asc(<Exp>)> {case-insensitive}
  OrderElem.Legacy10Desc = <desc(<Exp>)> {case-insensitive}

context-free syntax // Expressions.sdf3

  Exp.Legacy10Not = <!<Exp>> {right}
  Exp.Legacy10Regex = [[Exp] =~ [Exp]] {left, prefer}

  Exp.Legacy10Label = <<Exp>. label()> {case-insensitive}
  Exp.Legacy10Labels = <<Exp>. labels()> {case-insensitive}
  Exp.Legacy10HasLabel = <<Exp>. hasLabel(<Exp>)> {case-insensitive}
  Exp.Legacy10Id = <<Exp>. id()> {case-insensitive}
  Exp.Legacy10Has = <<Exp>. has(<{Exp ", "}+>)> {case-insensitive}
  Exp.Legacy10InDegree  = <<Exp>. inDegree()> {case-insensitive}
  Exp.Legacy10OutDegree = <<Exp>. outDegree()> {case-insensitive}
  Exp.Legacy10CallStatement = <call <Legacy10PackageDecl?><Legacy10RoutineName><Legacy10ArgumentList>> {case-insensitive}

  Legacy10PackageDecl.PackageDecl = <<Legacy10PackageName>.>
  Legacy10PackageName = IDENTIFIER
  Legacy10RoutineName = IDENTIFIER
  Legacy10ArgumentList.ArgumentList = <(<{Exp ", "}*>)>

  Legacy10InlinedExp = <(<Legacy10InlinedExp>)> {bracket}
  Legacy10InlinedExp = PropRef
  Legacy10InlinedExp = Literal {prefer}
  Legacy10InlinedExp = InlinedCall
  
  Legacy10InlinedExp.SelfPropRef = <<Prop>>
  Legacy10InlinedExp.SelfPropRef = <<Dot><Prop>>
  
  Legacy10InlinedExp.Not1 = <!<Legacy10InlinedExp>> {right}
  Legacy10InlinedExp.Not2 = <not <Legacy10InlinedExp>> {right, case-insensitive}
  Legacy10InlinedExp.UMin = <-<Legacy10InlinedExp>> {right}

  Legacy10InlinedExp.And = <<Legacy10InlinedExp> and <Legacy10InlinedExp>> {left, case-insensitive}
  Legacy10InlinedExp.Or = <<Legacy10InlinedExp> or <Legacy10InlinedExp>> {left, case-insensitive}
  Legacy10InlinedExp.Mul = <<Legacy10InlinedExp> * <Legacy10InlinedExp>> {left}
  Legacy10InlinedExp.Add = <<Legacy10InlinedExp> + <Legacy10InlinedExp>> {left}
  Legacy10InlinedExp.Div = <<Legacy10InlinedExp> / <Legacy10InlinedExp>> {left}
  Legacy10InlinedExp.Mod = <<Legacy10InlinedExp> % <Legacy10InlinedExp>> {left}
  Legacy10InlinedExp.Sub = <<Legacy10InlinedExp> - <Legacy10InlinedExp>> {left}
  Legacy10InlinedExp.Eq = <<Legacy10InlinedExp> = <Legacy10InlinedExp>> {left}
  Legacy10InlinedExp.Gt = [[Legacy10InlinedExp] > [Legacy10InlinedExp]] {left}
  Legacy10InlinedExp.Lt = [[Legacy10InlinedExp] < [Legacy10InlinedExp]] {left}
  Legacy10InlinedExp.Gte = [[Legacy10InlinedExp] >= [Legacy10InlinedExp]] {left}
  Legacy10InlinedExp.Lte = [[Legacy10InlinedExp] <= [Legacy10InlinedExp]] {left}

  Legacy10InlinedExp.Neq1 = [[Legacy10InlinedExp] != [Legacy10InlinedExp]] {left}
  Legacy10InlinedExp.Neq2 = [[Legacy10InlinedExp] <> [Legacy10InlinedExp]] {left}

  Legacy10InlinedExp.Regex = [[Legacy10InlinedExp] =~ [Legacy10InlinedExp]] {left, prefer}

  InlinedCall.Label = <<Obj>label()> {case-insensitive}
  InlinedCall.Labels = <<Obj>labels()> {case-insensitive}
  InlinedCall.HasLabel = <<Obj>hasLabel(<Exp>)> {case-insensitive}
  InlinedCall.Id = <<Obj>id()> {case-insensitive}
  InlinedCall.Has = <<Obj>has(<{Exp ", "}*>)> {case-insensitive}
  InlinedCall.InDegree  = <<Obj>inDegree()> {case-insensitive}
  InlinedCall.OutDegree = <<Obj>outDegree()> {case-insensitive}

  Dot.Dot = <.>
  Obj.Obj = <<VarRef><Dot>>
  Obj.Obj = <<Dot?>>

context-free priorities

  {
    left:
      InlinedCall.Label
      InlinedCall.Labels
      InlinedCall.HasLabel
      InlinedCall.Id
      InlinedCall.Has
      InlinedCall.InDegree
      InlinedCall.OutDegree
  }
  >
  {
    right:
      Legacy10InlinedExp.UMin
      Legacy10InlinedExp.Not1
  }
  >
  {
    left:
      Legacy10InlinedExp.Mul
      Legacy10InlinedExp.Div
      Legacy10InlinedExp.Mod
  }
  >
  {
    left:
      Legacy10InlinedExp.Add
      Legacy10InlinedExp.Sub
  }
  >
  {
    left:
      Legacy10InlinedExp.Eq
      Legacy10InlinedExp.Neq1
      Legacy10InlinedExp.Neq2
      Legacy10InlinedExp.Gt
      Legacy10InlinedExp.Lt
      Legacy10InlinedExp.Gte
      Legacy10InlinedExp.Lte
      Legacy10InlinedExp.Regex
  }
  >
  {
    right:
      Legacy10InlinedExp.Not2
  }
  >
  {
    left:
      Legacy10InlinedExp.And
  }
  >
  {
    left:
      Legacy10InlinedExp.Or
  }
