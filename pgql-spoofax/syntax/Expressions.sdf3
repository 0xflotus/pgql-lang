module Expressions

imports

  Names
  Literals
  pgql-lang
  Legacy

context-free syntax

  ExpAsVar.ExpAsVar = <<Exp><VarAssign?>>

  Exp = <(<Exp>)> {bracket}
  Exp = PropRef
  Exp = VarRef
  Exp = Literal

  Exp.Not = <not <Exp>> {right, case-insensitive}
  Exp.UMin = <-<Exp>> {right}

  Exp.And = <<Exp> and <Exp>> {left, case-insensitive}
  Exp.Or = <<Exp> or <Exp>> {left, case-insensitive}
  Exp.Mul = <<Exp> * <Exp>> {left}
  Exp.Add = <<Exp> + <Exp>> {left}
  Exp.Div = <<Exp> / <Exp>> {left}
  Exp.Mod = <<Exp> % <Exp>> {left}
  Exp.Sub = <<Exp> - <Exp>> {left}
  Exp.Eq = <<Exp> = <Exp>> {left}
  Exp.Gt = [[Exp] > [Exp]] {left}
  Exp.Lt = [[Exp] < [Exp]] {left}
  Exp.Gte = [[Exp] >= [Exp]] {left}
  Exp.Lte = [[Exp] <= [Exp]] {left}

  Exp.Neq1 = [[Exp] != [Exp]] {left}
  Exp.Neq2 = [[Exp] <> [Exp]] {left}

  Exp.Cast = <cast(<Exp> as <DATA-TYPE>)> {case-insensitive}

  Exp.Exists = <exists( <Query> )> {case-insensitive}

  Exp.IsNull = <<Exp> is null> {right, case-insensitive}
  Exp.IsNotNull = <<Exp> is not null> {right, case-insensitive}

context-free syntax // function calls

  Exp.FunctionCall = <<PackageName?><FUNCTION-NAME>(<{Exp ", "}*>)> {case-insensitive, avoid}
  PackageName.PackageName = <<IDENTIFIER>.>

context-free syntax // Aggregates

  Exp.COUNT        = <count(<Distinct?><StarOrExp>)> {case-insensitive}
  Exp.MIN          = <min(<Distinct?><Exp>)> {case-insensitive}
  Exp.MAX          = <max(<Distinct?><Exp>)> {case-insensitive}
  Exp.SUM          = <sum(<Distinct?><Exp>)> {case-insensitive}
  Exp.AVG          = <avg(<Distinct?><Exp>)> {case-insensitive}

  StarOrExp.Star = <*>
  StarOrExp = <<Exp>>
  Distinct.Distinct = <distinct> {case-insensitive}

context-free priorities

  {
    left:
      Exp.Legacy10Label
      Exp.Legacy10Labels
      Exp.Legacy10HasLabel
      Exp.Legacy10Id
      Exp.Legacy10Has
      Exp.Legacy10InDegree
      Exp.Legacy10OutDegree
  }
  >
  {
    right:
      Exp.UMin
      Exp.Legacy10Not
  }
  >
  {
    left:
      Exp.Mul
      Exp.Div
      Exp.Mod
  }
  >
  {
    left:
      Exp.Add
      Exp.Sub
  }
  >
  {
    left:
      Exp.Eq
      Exp.Neq1
      Exp.Neq2
      Exp.Gt
      Exp.Lt
      Exp.Gte
      Exp.Lte
      Exp.Legacy10Regex
  }
  >
  {
    right:
      Exp.Not
  }
  >
  {
    left:
      Exp.And
  }
  >
  {
    left:
      Exp.Or
  }
