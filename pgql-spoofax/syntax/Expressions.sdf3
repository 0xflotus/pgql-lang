module Expressions

imports
  
  Names
  Literals
  BuiltInFunctions
  
context-free syntax

  Exp = <(<Exp>)> {bracket}
  Exp = PropRef
  Exp = VarRef
  Exp = Literal
  
  Exp.Not1 = <!<Exp>> {right}
  Exp.Not2 = <not <Exp>> {right, case-insensitive}
  Exp.UMin = <-<Exp>> {right}

  Exp.And = <<Exp> and <Exp>> {left, case-insensitive}
  Exp.Or = <<Exp> or <Exp>> {left, case-insensitive}
  Exp.Mul = <<Exp> * <Exp>> {left}
  Exp.Add = <<Exp> + <Exp>> {left}
  Exp.Div = <<Exp> / <Exp>> {left}
  Exp.Mod = <<Exp> % <Exp>> {left}
  Exp.Sub = <<Exp> - <Exp>> {left}
  Exp.Eq = <<Exp> = <Exp>> {left}
  Exp.Gt = [[Exp] > [Exp]] {left}
  Exp.Lt = [[Exp] < [Exp]] {left}
  Exp.Gte = [[Exp] >= [Exp]] {left}
  Exp.Lte = [[Exp] <= [Exp]] {left}

  Exp.Neq1 = [[Exp] != [Exp]] {left}
  Exp.Neq2 = [[Exp] <> [Exp]] {left}

  Exp.Regex = [[Exp] =~ [Exp]] {left, prefer}

context-free syntax

  InlinedExp = <(<InlinedExp>)> {bracket}
  InlinedExp = PropRef
  InlinedExp = Literal {prefer}
  InlinedExp = InlinedCall
  
  InlinedExp.SelfPropRef = <<Prop>>
  InlinedExp.SelfPropRef = <<Dot><Prop>>
  
  InlinedExp.Not1 = <!<InlinedExp>> {right}
  InlinedExp.Not2 = <not <InlinedExp>> {right, case-insensitive}
  InlinedExp.UMin = <-<InlinedExp>> {right}

  InlinedExp.And = <<InlinedExp> and <InlinedExp>> {left, case-insensitive}
  InlinedExp.Or = <<InlinedExp> or <InlinedExp>> {left, case-insensitive}
  InlinedExp.Mul = <<InlinedExp> * <InlinedExp>> {left}
  InlinedExp.Add = <<InlinedExp> + <InlinedExp>> {left}
  InlinedExp.Div = <<InlinedExp> / <InlinedExp>> {left}
  InlinedExp.Mod = <<InlinedExp> % <InlinedExp>> {left}
  InlinedExp.Sub = <<InlinedExp> - <InlinedExp>> {left}
  InlinedExp.Eq = <<InlinedExp> = <InlinedExp>> {left}
  InlinedExp.Gt = [[InlinedExp] > [InlinedExp]] {left}
  InlinedExp.Lt = [[InlinedExp] < [InlinedExp]] {left}
  InlinedExp.Gte = [[InlinedExp] >= [InlinedExp]] {left}
  InlinedExp.Lte = [[InlinedExp] <= [InlinedExp]] {left}

  InlinedExp.Neq1 = [[InlinedExp] != [InlinedExp]] {left}
  InlinedExp.Neq2 = [[InlinedExp] <> [InlinedExp]] {left}

  InlinedExp.Regex = [[InlinedExp] =~ [InlinedExp]] {left, prefer}
