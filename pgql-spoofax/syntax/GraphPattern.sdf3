module GraphPattern

imports
  
  Literals
  Names
  Expressions
  BuiltInFunctions

context-free syntax

  GraphPattern.GraphPattern = 
    <
      where
        <{PatternElem ",\n"}+>
    > {case-insensitive}
  
  PatternElem = Path
  
  PatternElem.Constraint = Exp {avoid} // see Expressions.sdf3. Note: 'avoid' disambiguates 'select * where (X.p1)' ('(X.p1)' can be a Constraint or a Node)

context-free syntax

  Path.Path = <<Node><{EdgeNode ""}+><VarAssign?>>
  Path.SingleNode = <(<NoExpression?>)>

  Node.Node = <(<ElemContents>)>
  Node.SimpleNode = <<VARNAME>>

  EdgeNode.EdgeNode = < <Connection> <Node>>
  Connection.OutConn = [-[EdgeContents?]->]
  Connection.InConn = [<-[EdgeContents?]-]
  Connection.OutEdge = [->]
  Connection.InEdge = [<-]
  
  EdgeContents.EdgeContents = <[<ElemContents>]>
  EdgeContents.PathQuery = </:<PATHPATTERNNAME>/>
  
  KleeneStar.KleeneStar = <*>

context-free syntax

  ElemContents.ElemContents =   <<VARNAME?><Labels?><Ids?><WithInlinedConstraints?>>
  NoExpression.ElemContents1 = <<VARNAME?><Labels><Ids?><WithInlinedConstraints?>> {prefer}
  NoExpression.ElemContents2 = <<VARNAME?><Labels?><Ids><WithInlinedConstraints?>>
  NoExpression.ElemContents3 = <<VARNAME?><Labels?><Ids?><WithInlinedConstraints>> {avoid}
  Labels.Labels = <:<AltLit>>
  Ids.Ids = <@<AltLit>>
  
  WithInlinedConstraints.Constraint = < with <{InlinedExp ", "}+>> {case-insensitive}
