module GraphPattern

imports
  
  Literals
  Names
  Expressions

context-free syntax

  GraphPattern.GraphPattern = 
    <
      where
        <{PatternElem ",\n"}+>
    > {case-insensitive}
  
  PatternElem = Path
  
  PatternElem.Constraint = Exp {avoid} // see Expressions.sdf3. Note: 'avoid' disambiguates 'select * where (X.p1)' ('(X.p1)' can be a Constraint or a Vertex)

context-free syntax

  Path.Path = <<Vertex><{EdgeVertex ""}+><VarAssign?>>
  Path.SingleVertex = <(<ElemContents>)>

  Vertex.Vertex = <(<ElemContents>)>
  Vertex.VertexWithoutBrackets = <<VARNAME>> // deprecated

  EdgeVertex.EdgeVertex = < <Connection> <Vertex>>
  Connection.OutConn = [-[EdgeOrPathContents?]->]
  Connection.InConn = [<-[EdgeOrPathContents?]-]
  Connection.UndirectedEdge = [-[EdgeContents?]-]
  Connection.OutEdge = [->]
  Connection.InEdge = [<-]
  Connection.UndirectedEdge = [-]
  
  EdgeContents.EdgeContents = <[<ElemContents>]>
  EdgeOrPathContents = EdgeContents
  EdgeOrPathContents.Path = </<VARNAME?>:<AltPath><PathQuantifier?>/>
  AltPath.Or = <<AltPath>|<AltPath>> {left}
  AltPath.PathPatternRef = PATHPATTERNNAME

  PathQuantifier.ZeroOrMore = <*>
  PathQuantifier.OneOrMore = <+>
  PathQuantifier.ExactlyN = <{<UNSIGNED-INT>}>
  PathQuantifier.NOrMore = <{<UNSIGNED-INT>,}>
  PathQuantifier.BetweenNAndM = <{<UNSIGNED-INT>,<UNSIGNED-INT>}>
  PathQuantifier.BetweenZeroAndM = <{,<UNSIGNED-INT>}>

context-free syntax

  ElemContents.ElemContents = <<VARNAME?><Labels?><Ids?><WithInlinedConstraints?>>
  Labels.Labels = <:<AltLit>>
  Ids.Ids = <@<AltLit>>
  WithInlinedConstraints.Constraint = < with <{InlinedExp ", "}+>> {case-insensitive}
