module GraphPattern

imports
  
  Literals
  Names
  Expressions
  Legacy

context-free syntax

  MatchClause.GraphPattern = 
    <
      match
        <{PathPattern ",\n"}+>
    > {case-insensitive}

context-free syntax

  PathPattern.PathPattern = <<Vertex><{EdgeVertex ""}+>>
  PathPattern.SingleVertex = <(<ElemContents>)> // PGQL 1.0
  Vertex.Vertex = <(<ElemContents>)>

  EdgeVertex.EdgeVertex = < <Connection> <Vertex>>
  Connection.OutConn = [-[EdgeOrPathContents?]->]
  Connection.InConn = [<-[EdgeOrPathContents?]-]
  Connection.UndirectedEdge = [-[EdgeContents?]-]
  Connection.OutEdge = [->]
  Connection.InEdge = [<-]
  Connection.UndirectedEdge = [-]
  
  EdgeContents.EdgeContents = <[<ElemContents>]>
  EdgeOrPathContents = EdgeContents
  EdgeOrPathContents.Path = </<IDENTIFIER?>:<AltPath><PathQuantifier?>/>

  PathQuantifier.ZeroOrMore = <*>
  PathQuantifier.OneOrMore = <+>
  PathQuantifier.Optional = <?>
  PathQuantifier.ExactlyN = <{<UNSIGNED-INT>}>
  PathQuantifier.NOrMore = <{<UNSIGNED-INT>,}>
  PathQuantifier.BetweenNAndM = <{<UNSIGNED-INT>,<UNSIGNED-INT>}>
  PathQuantifier.BetweenZeroAndM = <{,<UNSIGNED-INT>}>

context-free syntax

  ElemContents.ElemContents = <<IDENTIFIER?><LabelPredicate?><Legacy10Ids?><Legacy10WithInlinedConstraints?>>
  LabelPredicate.Labels = <:<AltLit>>
