module check

imports

  stratego/-
  libspoofax/properties/-
  libspoofax/nabl/-
  libspoofax/task/-
  libspoofax/types/-
  signatures/-
  normalized-signatures
  common
  names/-
  pp
  runtime/properties/-
  runtime/task/-

rules // Unresolved/duplicate variables

  nabl-check-disable-unresolved = id
  nabl-check-disable-duplicate(|uri, ns) = id

  nabl-constraint(|ctx):
    query@NormalizedQuery(_, selectClause, _, matchClause, group-by, having, order-by, _, _, _) -> <fail>
    with unresolved-vars := <collect-in-outer-query(?VarRef(<id>))> query
        ; if None() := group-by
          then <batch-generate-error(|ctx, "Unresolved variable")> unresolved-vars
          else unresolved-vars-after-grouping := <collect-in-outer-query-outside-aggregation(?VarRef(<id>))> (selectClause, having, order-by)
             ; other-unresolved-vars := <diff> (unresolved-vars, unresolved-vars-after-grouping)
             ; <batch-generate-error(|ctx, "Unresolved variable")> other-unresolved-vars
             ; if CreateOneGroup() := group-by // aggregation without GROUP BY
               then <batch-generate-error(|ctx, "Unresolved variable (did you mean to use an aggregation?)")> unresolved-vars-after-grouping
               else <batch-generate-error(|ctx, "Unresolved variable (did you mean to use a group key?)")> unresolved-vars-after-grouping
               end
          end

  nabl-constraint(|ctx):
    NormalizedQuery(_, selectClause, _, GraphPattern(vertices, edges, _), groupClause, _, _, _, _, _) -> <fail>
    with matchVars := <collect(get-pattern-elem)> (vertices, edges)
       ; groupExpressions := <collect(?ExpAsVar(_, <id>, _, _))> groupClause
       ; selectExpressions := <collect(?ExpAsVar(_, <id>, _, _))> selectClause
       ; <generate-error-on-duplicates(|ctx)> matchVars
       ; <generate-error-on-duplicates(|ctx)> groupExpressions
       ; <generate-error-on-duplicates(|ctx)> selectExpressions

       ; groupVars := <collect(?ExpAsVar(_, <id>, NonAnonymous(), _))> groupClause
       ; redefinitions-in-groupBy := <strip-annos; isect> (groupVars, matchVars)
       ; <batch-generate-error(|ctx, "Duplicate variable: variable already defined in the MATCH clause")> redefinitions-in-groupBy
       ; selectVars := <collect(?ExpAsVar(_, <id>, NonAnonymous(), _))> selectClause
       ; redefinitions-in-select := <strip-annos; isect> (selectVars, groupVars)
       ; <batch-generate-error(|ctx, "Duplicate variable: variable already defined in the GROUP BY clause")> redefinitions-in-select

  get-pattern-elem = ?Vertex(<id>, _, _) + ?Edge(_, <id>, _, _, _, _) + ?Path(_, _, _, _, <id>, _)

  generate-error-on-duplicates(|ctx) = strip-annos; ?vars; map(generate-error-on-duplicate(|ctx, vars))

  generate-error-on-duplicate(|ctx, vars):
    var -> <id>
    with vars' := <filter(?var)> vars
       ; <try(gt; !var; generate-error(|ctx, "Duplicate variable"))> (<length> vars', 1)

rules // in-lined constraints

  nabl-constraint(|ctx):
    ReferenceInInlinedConstraint(v) -> <fail>
    with
      <generate-error(|ctx, $['[v]' should be omitted here])> v

  nabl-constraint(|ctx):
    CrossReferenceInInlinedConstraint(v) -> <fail>
    with
      <generate-error(|ctx, $['[v]' is not visible here])> v

rules // vertex in WHERE without rounded brackets

  nabl-constraint(|ctx):
    Vertex(v, _, _) -> <fail>
    where
      <string-ends-with(|<VERTEX_WITHOUT_BRACKETS>)> v
    with
      <generate-error(|ctx, $<Vertices need to be surrounded by brackets: (<<origin-text> v>)>)> v

rules

  nabl-constraint(|ctx):
    NormalizedQuery(_, SelectClause(_, ExpAsVars(select-elems)), _, _, groupClause, havingClause, orderByClause, _, _, _) -> <fail>
    where
      None() := groupClause
    ; [] := <get-aggregations> select-elems // there are no aggregations in the SELECT
    with
      aggregations-in-orderByclause := <get-aggregations> orderByClause
    ; <batch-generate-error(|ctx, "Aggregation in ORDER BY only allowed if SELECT has aggregations")> aggregations-in-orderByclause

  // if SELECT DISTINCT then ORDER BY expressions may only be repetitions of expressions in SELECT
  nabl-constraint(|ctx):
    NormalizedQuery(_, SelectClause(Some(Distinct()), ExpAsVars(select-elems)), _, _, _, _, Some(OrderByClause(order-by-elems)), _, _, _) -> <fail>
    with
      select-vars := <map(?ExpAsVar(_, <id>, _, _)); strip-annos> select-elems
    ; order-by-expressions := <map(?OrderByElem(<id>, _, _)); strip-annos> order-by-elems
    ; order-by-expressions-not-in-select := <remove-all(?VarRef(<id>, _); !(<id>, select-vars); elem)> order-by-expressions
    ; <batch-generate-error(|ctx, "Because of DISTINCT projection, the expression in ORDER BY should be one of the expressions in the SELECT")> order-by-expressions-not-in-select

  nabl-constraint(|ctx):
    t -> <fail>
    where
      <is-aggregate> t
    with
      aggrsInAggr := <get-arguments; get-aggregations> t
    ; <batch-generate-error(|ctx, "Nested aggregation is not allowed")> aggrsInAggr

  nabl-constraint(|ctx):
    t@Constraints(_) -> <fail>
    with
      aggregations := <get-aggregations> t;
      <batch-generate-error(|ctx, "Aggregation not allowed in the WHERE clause")> aggregations

  nabl-constraint(|ctx):
    t@GroupByClause(_) -> <fail>
    with
      aggregations := <get-aggregations> t;
      <batch-generate-error(|ctx, "Aggregation not allowed in GROUP BY")> aggregations

  nabl-constraint(|ctx):
    e@Null() -> <fail>
    with
      <generate-error(|ctx, "Use IS NULL or IS NOT NULL")> e

  nabl-constraint(|ctx):
    e@IsNull(_) -> <fail>
    with
      <generate-error(|ctx, "IS NULL is not yet supported")> e

  nabl-constraint(|ctx):
    e@IsNotNull(_) -> <fail>
    with
      <generate-error(|ctx, "IS NOT NULL is not yet supported")> e

  nabl-constraint(|ctx):
    SelectClause(_, e@Star()) -> <fail>
    with
      <generate-error(|ctx, "SELECT * not allowed in combination with GROUP BY")> e

  nabl-constraint(|ctx):
    SelectClause(_, e@ExpAsVars([])) -> <fail>
    with
      <generate-error(|ctx, "SELECT * not allowed if there are no variables in the graph pattern")> e

  nabl-constraint(|ctx):
    COUNT(Some(Distinct()), e@Star()) -> <fail>
    with
      <generate-error(|ctx, "* not allowed in combination with DISTINCT")> e

rules // subqueries

  nabl-constraint(|ctx):
    q@NormalizedQuery(_, _, _, _, _, _, _, _, _, _) -> <fail>
    with scalarSubqueries := <collect(?Exists(_) + ?Subquery(_)); remove-all(?Exists(_))> q
       ; multiColumnScalarSubqueries := <filter(is-multi-column-subquery)> scalarSubqueries
       ; zeroColumnScalarSubqueries := <filter(is-zero-column-subquery)> scalarSubqueries
       ; <batch-generate-error(|ctx, "Scalar subquery is expected to return a single column, but multiple columns were returned")> multiColumnScalarSubqueries
       ; <batch-generate-error(|ctx, "Scalar subquery is expected to return a single column, but zero columns were returned")> zeroColumnScalarSubqueries

  is-multi-column-subquery = ?Subquery(NormalizedQuery(_, SelectClause(_, e@ExpAsVars(expAsVars)), _, _, _, _, _, _, _, _))
                           ; where(not( <eq> (<length> expAsVars, 1) )); !e

  is-zero-column-subquery = ?Subquery(NormalizedQuery(_, SelectClause(_, e@ExpAsVars(expAsVars)), _, _, _, _, _, _, _, _))
                           ; where( <eq> (<length> expAsVars, 0) ); !e

rules // helper rules

  batch-generate-error(|ctx, m) = map(generate-error(|ctx, m))
    
  generate-error(|ctx, m):
    t -> <id>
    with
      failtask := <task-create-fail(|ctx)>
    ; <task-create-error-on-failure(|ctx, failtask, m)> t

  // TODO
  nabl-constraint(|ctx):
    Or(_, PathPatternRef(p)) -> <fail>
    where
      <generate-error(|ctx, "Alternative path patterns not yet supported")> p

  nabl-constraint(|ctx):
    ErrorMessage(m) -> <fail>
    where
      <generate-error(|ctx, m)> m

rules // temporary limitation

  nabl-constraint(|ctx):
    CommonPathExpression(_, vertices, connections, Constraints([constraint])) -> <fail>
    with vertexVariables := <collect(?Vertex(<id>, _, _))> vertices
       ; connectionsVariables := <collect(?Edge(_, <id>, _, _, _, _) + ?Path(_, _, _, _, <id>, _))> connections
       ; variablesDefs := <union> (vertexVariables, connectionsVariables)
       ; <generate-error-on-cross-constraint(|ctx, variablesDefs)> constraint

  generate-error-on-cross-constraint(|ctx, variablesDefs):
    t@And(lhs, rhs) -> t
    with <generate-error-on-cross-constraint(|ctx, variablesDefs)> lhs
       ; <generate-error-on-cross-constraint(|ctx, variablesDefs)> rhs

  generate-error-on-cross-constraint(|ctx, variablesDefs):
    t -> t
    where <not(?And(_, _))> t
    with variables := <collect(?VarRef(<id>, _) + ?Vertex(<id>, _, _) + ?Edge(_, <id>, _, _, _, _) + ?Path(_, _, _, _, <id>, _))> t
       ; variableRefs := <strip-annos; isect> (variablesDefs, variables)
       ; <try(!(<length> variableRefs, 1); gt; !t; generate-error(|ctx, "Not yet supported: expressions in PATH with references to multiple variables"))> t
