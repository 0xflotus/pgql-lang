module check

imports

  stratego/-
  runtime/properties/-
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  signatures/-
  normalized-signatures
  common
  names/-

rules // Unresolved/duplicate variables

  nabl-check-disable-unresolved = id
  nabl-check-disable-duplicate(|uri, ns) = id

  nabl-constraint(|ctx):
    ref -> <fail>
    where
      <?VarRef(v) + ?GroupRef(v) + ?SelectOrGroupRef(v) + ?VarOrSelectRef(v)> ref
    ;	<generate-error-on-unresolved(|ctx, "Unresolved variable")> v

  nabl-constraint(|ctx):
    PathPatternRef(p) -> <fail>
    where
      <generate-error-on-unresolved(|ctx, "Undefined path pattern")> p

  nabl-constraint(|ctx):
    expAsVar -> <fail>
    where
      <?ExpAsVar(_, v) + ?ExpAsSelectVar(_, v) + ?AnonymousExpAsVar(_, v)> expAsVar;
      <generate-error-on-duplicate(|ctx, NablNsSelectVar(), "Duplicate select key")> v

  nabl-constraint(|ctx):
    expAsGroupVar -> <fail>
    where
      <?ExpAsGroupVar(_, v) + ?AnonymousExpAsGroupVar(_, v)> expAsGroupVar;
      <generate-error-on-duplicate(|ctx, NablNsGroupVar(), "Duplicate group key")> v

  nabl-constraint(|ctx):
    Edge(_, e, _, _) -> <fail>
    where
      <generate-error-on-duplicate(|ctx, NablNsWhereVar(), "Duplicate edge variable")> e

  nabl-constraint(|ctx):
    ExpAsGroupVar(_, v) -> <fail>
    where
      <generate-error-on-duplicate(|ctx, NablNsVar1(), "Duplicate variable; variable already defined in the WHERE clause")> v

  nabl-constraint(|ctx):
    ExpAsSelectVar(_, v) -> <fail>
    where
      <generate-error-on-duplicate(|ctx, NablNsVar2(), "Duplicate variable; variable already defined in the GROUP BY clause")> v

rules // in-lined constraints

  nabl-constraint(|ctx):
    ReferenceInInlinedConstraint(v) -> <fail>
    with
      <generate-error(|ctx, $['[v]' should be omitted here])> v
  
  nabl-constraint(|ctx):
    t@CrossReferenceInInlinedConstraint() -> <fail>
    with
      <generate-error(|ctx, "In-lined constraint may not access other variables")> t

rules // vertex in WHERE without rounded brackets

  nabl-constraint(|ctx):
    Vertex(v) -> <fail>
    where
      <string-ends-with(|<VERTEX_WITHOUT_BRACKETS>)> v
    with
      <generate-error(|ctx, $<Vertices in the WHERE clause need to be surrounded by brackets: (<<origin-text> v>)>)> v

rules
  
  nabl-constraint(|ctx):
    Query(_, Vars(vars), _, _, groupClause, Some(orderClause), _) -> <fail>
    where
      None() := groupClause
    ; [] := <collect(is-aggregate)> vars // there are no aggregations in the SELECT
    with
      aggregations := <collect-om(is-aggregate, conc)> orderClause
    ; <batch-generate-error(|ctx, "Aggregation in ORDER BY only allowed if SELECT constains aggregations, or, in combination with GROUP BY")> aggregations

  nabl-constraint(|ctx):
    Query(_, Vars(select-exps), _, _, group-by, order-by, _) -> <fail>
    with
      group-refs := <collect-om(?GroupRef(<id>), conc)> select-exps
    ; select-or-group-refs := <collect-om(?SelectOrGroupRef(<id>), conc)> order-by
    ; if None() := group-by
      then
        <batch-generate-error-on-unresolved(|ctx, "Aggregation expected here since SELECT has other aggregation")> group-refs // error in SELECT
      ; <batch-generate-error-on-unresolved(|ctx, "Aggregation expected here since SELECT has aggregation")> select-or-group-refs // error in ORDER BY
      else
        <batch-generate-error-on-unresolved(|ctx, "Non-group key variable in SELECT")> group-refs // error in SELECT
      ; <batch-generate-error-on-unresolved(|ctx, "Cannot order by non-group key variable: use aggregation")> select-or-group-refs // error in ORDER BY
      end

  nabl-constraint(|ctx):
    t -> <fail>
    where
      <is-aggregate> t
    with
      aggrsInAggr := <get-arguments; collect-om(is-aggregate, conc)> t
    ; <batch-generate-error(|ctx, "Nested aggregation is not allowed")> aggrsInAggr  

  nabl-constraint(|ctx):
    e@Distinct() -> <fail>
    with
      <generate-error(|ctx, $[DISTINCT is not supported in PGQL 1.0])> e

rules // helper rules

  batch-generate-error(|ctx, m) = map(generate-error(|ctx, m))
    
  generate-error(|ctx, m):
    t -> <id>
    with
      failtask := <task-create-fail(|ctx)>
    ; <task-create-error-on-failure(|ctx, failtask, m)> t

  batch-generate-error-on-unresolved(|ctx, m) = map(generate-error-on-unresolved(|ctx, m))

  generate-error-on-unresolved(|ctx, m):
  	v -> <id>
  	with
  	  resolve-task := <nabl-create-collectdefs(|ctx)> v
    ; <task-create-error-on-failure(|ctx, resolve-task, m)> v

  generate-error-on-duplicate(|ctx, namespace, m):
    v -> <id>
    with
      uri := <nabl-uri; nabl-uri-parent> v
    ; resolve-task := <nabl-create-resolvedefs(|ctx, namespace, v, [])> uri
    ; <task-create-error-on-multiple(|ctx, resolve-task, m)> v

  var-is-edge(|ctx) = var-is-type(|ctx, "VarIsEdge")
  var-is-vertex(|ctx) = var-is-type(|ctx, "VarIsVertex")
  var-is-path(|ctx) = var-is-type(|ctx, "VarIsPath")

  var-is-type(|ctx, type):
    v -> rewrite-task1
    where
      v-resolve-task := <nabl-create-collectdefs(|ctx)> v
    ; v-prop-task    := <prop-create-lookup(|ctx, Type())> v-resolve-task
    ; rewrite-task1  := <task-create-rewrite(|ctx, type)> v-prop-task
      
  task-rewrite: ("VarIsVertex", VertexTy()) -> <id>
  task-rewrite: ("VarIsEdge", EdgeTy()) -> <id>
  task-rewrite: ("VarIsPath", PathTy()) -> <id>
