module check

imports

  stratego/-
  libspoofax/properties/-
  libspoofax/nabl/-
  libspoofax/task/-
  libspoofax/types/-
  signatures/-
  normalized-signatures
  common
  names/-
  pp
  runtime/properties/-
  runtime/task/-

rules // Unresolved/duplicate variables

  nabl-check-disable-unresolved = id
  nabl-check-disable-duplicate(|uri, ns) = id

  nabl-constraint(|ctx):
    ref -> <fail>
    where
      <?VarRef(v) + ?GroupRef(v) + ?SelectOrGroupRef(v) + ?VarOrSelectRef(v)> ref
    ;  <generate-error-on-unresolved(|ctx, "Unresolved variable")> v

  nabl-constraint(|ctx):
    expAsVar -> <fail>
    where
      <?ExpAsVar(_, v) + ?ExpAsSelectVar(_, v) + ?AnonymousExpAsVar(_, v)> expAsVar;
      <generate-error-on-duplicate(|ctx, NablNsSelectVar(), "Duplicate select key")> v

  nabl-constraint(|ctx):
    expAsGroupVar -> <fail>
    where
      <?ExpAsGroupVar(_, v) + ?AnonymousExpAsGroupVar(_, v)> expAsGroupVar;
      <generate-error-on-duplicate(|ctx, NablNsGroupVar(), "Duplicate group key")> v

  nabl-constraint(|ctx):
    Edge(_, e, _, _) -> <fail>
    where
      <generate-error-on-duplicate(|ctx, NablNsWhereVar(), "Duplicate edge variable")> e

  nabl-constraint(|ctx):
    ExpAsGroupVar(_, v) -> <fail>
    where
      <generate-error-on-duplicate(|ctx, NablNsVar1(), "Duplicate variable; variable already defined in the MATCH clause")> v

  nabl-constraint(|ctx):
    ExpAsSelectVar(_, v) -> <fail>
    where
      <generate-error-on-duplicate(|ctx, NablNsVar2(), "Duplicate variable; variable already defined in the GROUP BY clause")> v

rules // in-lined constraints

  nabl-constraint(|ctx):
    ReferenceInInlinedConstraint(v) -> <fail>
    with
      <generate-error(|ctx, $['[v]' should be omitted here])> v

  nabl-constraint(|ctx):
    CrossReferenceInInlinedConstraint(v) -> <fail>
    with
      <generate-error(|ctx, $['[v]' is not visible here])> v

rules // vertex in WHERE without rounded brackets

  nabl-constraint(|ctx):
    Vertex(v) -> <fail>
    where
      <string-ends-with(|<VERTEX_WITHOUT_BRACKETS>)> v
    with
      <generate-error(|ctx, $<Vertices need to be surrounded by brackets: (<<origin-text> v>)>)> v

rules

  nabl-constraint(|ctx):
    NormalizedQuery(_, SelectClause(_, ExpAsVars(select-elems)), _, _, groupClause, _, Some(orderClause), _, _, _) -> <fail>
    where
      None() := groupClause
    ; [] := <get-aggregations> select-elems // there are no aggregations in the SELECT
    with
      aggregations := <get-aggregations> orderClause
    ; <batch-generate-error(|ctx, "Aggregation in ORDER BY only allowed if SELECT constains aggregations, or, in combination with GROUP BY")> aggregations

  nabl-constraint(|ctx):
    NormalizedQuery(_, SelectClause(_, ExpAsVars(select-elems)), _, matchClause, group-by, _, order-by, _, _, _) -> <fail>
    where not ( None() := group-by )
    with group-refs := <collect-in-outer-query(?GroupRef(<id>))> select-elems
       ; select-or-group-refs := <collect-in-outer-query(?SelectOrGroupRef(<id>))> order-by

       ; pattern-elem-defs := <collect(?Vertex(<id>) + ?Edge(_, <id>, _, _) + ?Path(_, _, _, _, <id>, _))> matchClause
       ; select-var-defs := <collect-in-outer-query(?AnonymousExpAsVar(_, <id>) + ?ExpAsSelectVar(_, <id>))> select-elems
       ; group-var-defs := <collect-in-outer-query(?AnonymousExpAsGroupVar(_, <id>) + ?ExpAsGroupVar(_, <id>))> group-by
       ; var-defs-for-select := group-var-defs
       ; var-defs-for-order-by := <union> (group-var-defs, select-var-defs)
       ; group-refs-referencing-outer-query-vars-or-unresolved := <diff(strip-annos; eq)> (group-refs, var-defs-for-select )
       ; select-or-group-refs-referencing-outer-query-vars-or-unresolved := <diff(strip-annos; eq)> (select-or-group-refs, var-defs-for-order-by)
       ; referencing-outer-query-or-unresolved := <union> (group-refs-referencing-outer-query-vars-or-unresolved, select-or-group-refs-referencing-outer-query-vars-or-unresolved)

       ;   if CreateOneGroup() := group-by
         then <batch-generate-error-on-resolved(|ctx, "Can't reference variable from outer query when SELECT has aggregation, unless from within aggregation")> referencing-outer-query-or-unresolved // error in SELECT or ORDER BY
            ; <batch-generate-error-on-unresolved(|ctx, "Aggregation expected here since SELECT has other aggregation")> group-refs // error in SELECT
            ; <batch-generate-error-on-unresolved(|ctx, "Aggregation expected here since SELECT has aggregation")> select-or-group-refs // error in ORDER BY
         else <batch-generate-error-on-resolved(|ctx, "Can't reference variable from outer query after GROUP BY, unless from within aggregation")> referencing-outer-query-or-unresolved // error in SELECT or ORDER BY
            ; <batch-generate-error-on-unresolved(|ctx, "Non-group key variable in SELECT")> group-refs // error in SELECT
            ; <batch-generate-error-on-unresolved(|ctx, "Cannot order by non-group key variable; use aggregation")> select-or-group-refs // error in ORDER BY
          end

  // if SELECT DISTINCT then ORDER BY expressions may only be repetitions of expressions in SELECT
  nabl-constraint(|ctx):
    NormalizedQuery(_, SelectClause(Some(Distinct()), ExpAsVars(select-elems)), _, _, _, _, Some(OrderByClause(order-by-elems)), _, _, _) -> <fail>
    with
      select-vars := <map(?ExpAsVar(_, <id>) + ?ExpAsSelectVar(_, <id>) + ?AnonymousExpAsVar(_, <id>)); strip-annos> select-elems
    ; order-by-expressions := <map(?OrderByElem(<id>, _)); strip-annos> order-by-elems
    ; order-by-expressions-not-in-select := <remove-all(
                                                (?VarOrSelectRef(<id>) + ?SelectOrGroupRef(<id>))
                                              ; !(<id>, select-vars); elem)> order-by-expressions
    ; <batch-generate-error(|ctx, "Because of DISTINCT projection, the expression in ORDER BY should be one of the expressions in the SELECT")> order-by-expressions-not-in-select

  nabl-constraint(|ctx):
    t -> <fail>
    where
      <is-aggregate> t
    with
      aggrsInAggr := <get-arguments; get-aggregations> t
    ; <batch-generate-error(|ctx, "Nested aggregation is not allowed")> aggrsInAggr

  nabl-constraint(|ctx):
    t@Constraints(_) -> <fail>
    with
      aggregations := <get-aggregations> t;
      <batch-generate-error(|ctx, "Aggregation not allowed in the WHERE clause")> aggregations

  nabl-constraint(|ctx):
    t@GroupByClause(_) -> <fail>
    with
      aggregations := <get-aggregations> t;
      <batch-generate-error(|ctx, "Aggregation not allowed in GROUP BY")> aggregations

  path-reference(|ctx):
    VarRef(v) -> <fail>
    where
      var-is-path := <var-is-path(|ctx)> v;
      <task-create-error-on-success(|ctx, var-is-path, $[Path variables not supported in PGQL 1.1])> v

  nabl-constraint(|ctx):
    e@Null() -> <fail>
    with
      <generate-error(|ctx, "Use IS NULL or IS NOT NULL")> e

  nabl-constraint(|ctx):
    e@IsNull(_) -> <fail>
    with
      <generate-error(|ctx, "IS NULL is not yet supported")> e

  nabl-constraint(|ctx):
    e@IsNotNull(_) -> <fail>
    with
      <generate-error(|ctx, "IS NOT NULL is not yet supported")> e

  nabl-constraint(|ctx):
    ExpAsVars(e@Star()) -> <fail>
    with
      <generate-error(|ctx, "SELECT * not allowed in combination with GROUP BY")> e

  nabl-constraint(|ctx):
    COUNT(Some(Distinct()), e@Star()) -> <fail>
    with
      <generate-error(|ctx, "* not allowed in combination with DISTINCT")> e

  nabl-constraint(|ctx):
    e@HavingClause(_) -> <fail>
    with
      <generate-error(|ctx, "HAVING is not yet supported")> e

rules // subqueries

  nabl-constraint(|ctx):
    q@NormalizedQuery(_, _, _, _, _, _, _, _, _, _) -> <fail>
    with scalarSubqueries := <collect(?Exists(_) + ?Subquery(_)); remove-all(?Exists(_))> q
       ; multiColumnScalarSubqueries := <filter(is-multi-column-subquery)> scalarSubqueries
       ; zeroColumnScalarSubqueries := <filter(is-zero-column-subquery)> scalarSubqueries
       ; <batch-generate-error(|ctx, "Scalar subquery was exptected to return a single column, but multiple columns were returned")> multiColumnScalarSubqueries
       ; <batch-generate-error(|ctx, "Scalar subquery was exptected to return a single column, but zero columns were returned")> zeroColumnScalarSubqueries

  is-multi-column-subquery = ?Subquery(NormalizedQuery(_, SelectClause(_, e@ExpAsVars(expAsVars)), _, _, _, _, _, _, _, _))
                           ; where(not( <eq> (<length> expAsVars, 1) )); !e

  is-zero-column-subquery = ?Subquery(NormalizedQuery(_, SelectClause(_, e@ExpAsVars(expAsVars)), _, _, _, _, _, _, _, _))
                           ; where( <eq> (<length> expAsVars, 0) ); !e

rules // type checking

  nabl-constraint-1-1(|ctx):
    OrderByElem(exp, _) -> <fail>
    where
      <?SelectOrGroupRef(n) + ?VarOrSelectRef(n)> exp
    with
      var-is-vertex := <var-is-vertex(|ctx)> n;
      <task-create-error-on-success(|ctx, var-is-vertex, "Cannot order by vertex")> exp

  nabl-constraint-1-1(|ctx):
    OrderByElem(exp, _) -> <fail>
    where
      <?SelectOrGroupRef(n) + ?VarOrSelectRef(n)> exp
    with
      var-is-edge := <var-is-edge(|ctx)> n;
      <task-create-error-on-success(|ctx, var-is-edge, "Cannot order by edge")> exp

rules // version-specific error messages

  nabl-constraint(|ctx):
    q@NormalizedQuery(_, _, _, _, _, _, _, _, _, "v1.1") -> <id>
    with
      <alltd(nabl-constraint-1-1(|ctx))> q

rules // helper rules

  batch-generate-error(|ctx, m) = map(generate-error(|ctx, m))
    
  generate-error(|ctx, m):
    t -> <id>
    with
      failtask := <task-create-fail(|ctx)>
    ; <task-create-error-on-failure(|ctx, failtask, m)> t

  batch-generate-error-on-unresolved(|ctx, m) = map(generate-error-on-unresolved(|ctx, m))

  generate-error-on-unresolved(|ctx, m):
    v -> <id>
    with resolve-task := <nabl-create-collectdefs(|ctx)> v
       ; <task-create-error-on-failure(|ctx, resolve-task, m)> v

  batch-generate-error-on-resolved(|ctx, m) = map(generate-error-on-resolved(|ctx, m))

  generate-error-on-resolved(|ctx, m):
    v -> <id>
    with resolve-task := <nabl-create-collectdefs(|ctx)> v
       ; <task-create-error-on-success(|ctx, resolve-task, m)> v

  generate-error-on-duplicate(|ctx, namespace, m):
    v -> <id>
    with
      uri := <nabl-uri; nabl-uri-parent> v
    ; resolve-task := <nabl-create-resolvedefs(|ctx, namespace, v, [])> uri
    ; <task-create-error-on-multiple(|ctx, resolve-task, m)> v

  var-is-edge(|ctx) = var-is-type(|ctx, "VarIsEdge")
  var-is-vertex(|ctx) = var-is-type(|ctx, "VarIsVertex")
  var-is-path(|ctx) = var-is-type(|ctx, "VarIsPath")

  var-is-type(|ctx, type):
    v -> rewrite-task1
    where
      v-resolve-task := <nabl-create-collectdefs(|ctx)> v
    ; v-prop-task    := <prop-create-lookup(|ctx, Type())> v-resolve-task
    ; rewrite-task1  := <task-create-rewrite(|ctx, type)> v-prop-task
      
  task-rewrite: ("VarIsVertex", VertexTy()) -> <id>
  task-rewrite: ("VarIsEdge", EdgeTy()) -> <id>
  task-rewrite: ("VarIsPath", PathTy()) -> <id>

  // TODO
  nabl-constraint(|ctx):
    Or(_, PathPatternRef(p)) -> <fail>
    where
      <generate-error(|ctx, "Alternative path patterns not yet supported")> p

  nabl-constraint(|ctx):
    ErrorMessage(m) -> <fail>
    where
      <generate-error(|ctx, m)> m

rules // temporary limitation

  nabl-constraint(|ctx):
    CommonPathExpression(_, vertices, connections, Constraints([constraint])) -> <fail>
    with vertexVariables := <collect(?Vertex(<id>))> vertices
       ; connectionsVariables := <collect(?Edge(_, <id>, _, _) + ?Path(_, _, _, _, <id>, _))> connections
       ; variablesDefs := <union> (vertexVariables, connectionsVariables)
       ; <generate-error-on-cross-constraint(|ctx, variablesDefs)> constraint

  generate-error-on-cross-constraint(|ctx, variablesDefs):
    t@And(lhs, rhs) -> t
    with <generate-error-on-cross-constraint(|ctx, variablesDefs)> lhs
       ; <generate-error-on-cross-constraint(|ctx, variablesDefs)> rhs

  generate-error-on-cross-constraint(|ctx, variablesDefs):
    t -> t
    where <not(?And(_, _))> t
    with variables := <collect(?VarRef(<id>) + ?Vertex(<id>) + ?Edge(_, <id>, _, _) + ?Path(_, _, _, _, <id>, _))> t
       ; variableRefs := <strip-annos; isect> (variablesDefs, variables)
       ; <try(!(<length> variableRefs, 1); gt; !t; generate-error(|ctx, "Not yet supported: expressions in PATH with references to multiple variables"))> t
