module check

imports

  signatures/-
  sig-normalized
  sig-nabl
  common
  names/-
  runtime/properties/-
  
rules // Unresolved/duplicate variables
  
  nabl-check-disable-unresolved = id
  nabl-check-disable-duplicate(|uri, ns) = id
    
  nabl-constraint(|ctx):
    VarRef(v) -> <fail>
    where
    	<generate-error-on-unresolved(|ctx, "Unresolved variable")> v

  nabl-constraint(|ctx):
    PathPatternRef(p) -> <fail>
    where
      <generate-error-on-unresolved(|ctx, "Undefined path pattern")> p

  nabl-constraint(|ctx):
    expAsVar -> <fail>
    where
      <?ExpAsVar(v, _) + ?ExpAsGroupVar(v, _)> expAsVar;
      <generate-error-on-duplicate(|ctx, NablNsVar(), "Duplicate variable definition")> v

  nabl-constraint(|ctx):
    Edge(_, e, _, _) -> <fail>
    where
      <generate-error-on-duplicate(|ctx, NablNsVar(), "Duplicate edge variable")> e

rules // in-lined constraints
  
  nabl-constraint(|ctx):
    ReferenceInInlinedConstraint(v) -> <fail>
    with
      <generate-error(|ctx, $['[v]' should be omitted here])> v
  
  nabl-constraint(|ctx):
    t@CrossReferenceInInlinedConstraint() -> <fail>
    with
      <generate-error(|ctx, "In-lined constraint may not access other variables")> t

rules
  
  nabl-constraint(|ctx):
    Query(_, Vars(vars), _, _, groupClause, Some(orderClause), _) -> <fail>
    where
      None() := groupClause;
      [] := <collect(is-aggregate)> vars // there are no aggregations in the SELECT
    with
      aggregations := <collect-om(is-aggregate, conc)> orderClause;
      <batch-generate-error(|ctx, "Aggregation in ORDER BY only allowed if SELECT constains aggregations, or, in combination with GROUP BY")> aggregations

  nabl-constraint(|ctx):
    Query(_, Vars(select-exps), _, _, group-by, order-by, _) -> <fail>
    with group-refs := <collect-om(?GroupRef(<id>), conc)> select-exps
    	 ; select-or-group-refs := <collect-om(?SelectOrGroupRef(<id>), conc)> order-by
    	 ; if None() := group-by
    	     then <batch-generate-error-on-unresolved(|ctx, "Aggregation expected here since SELECT has other aggregation")> group-refs // error in SELECT
    	        ; <batch-generate-error-on-unresolved(|ctx, "Aggregation expected here since SELECT has aggregation")> select-or-group-refs // error in ORDER BY
    	     else <batch-generate-error-on-unresolved(|ctx, "Non-group key variable in SELECT")> group-refs // error in SELECT
              ; <batch-generate-error-on-unresolved(|ctx, "Cannot order by non-group key variable: use aggregation")> select-or-group-refs // error in ORDER BY
    	   end

  nabl-constraint(|ctx):
    t -> <fail>
    where
      <is-aggregate> t
    with
      aggrsInAggr := <get-arguments; collect-om(is-aggregate, conc)> t;
      <batch-generate-error(|ctx, "Nested aggregation is not allowed")> aggrsInAggr  

rules // helper rules

  batch-generate-error(|ctx, m) = map(generate-error(|ctx, m))
    
  generate-error(|ctx, m):
    t -> <id>
    with
      failtask := <task-create-fail(|ctx)>;
      <task-create-error-on-failure(|ctx, failtask, m)> t

  batch-generate-error-on-unresolved(|ctx, m) = map(generate-error-on-unresolved(|ctx, m))

  generate-error-on-unresolved(|ctx, m):
  	v -> <id>
  	with
  	  resolve-task := <nabl-create-collectdefs(|ctx)> v;
      <task-create-error-on-failure(|ctx, resolve-task, m)> v

  generate-error-on-duplicate(|ctx, namespace, m):
    v -> <id>
    with
      uri := <nabl-uri; nabl-uri-parent> v;
      resolve-task := <nabl-create-resolvedefs(|ctx, NablNsVar(), v, [])> uri;
      <task-create-error-on-multiple(|ctx, resolve-task, m)> v
      
signature constructors
  
  ReferenceInInlinedConstraint : var -> ReferenceInInlinedConstraint
  CrossReferenceInInlinedConstraint : CrossReferenceInInlinedConstraint

rules // future PGQL versions

  nabl-constraint(|ctx):
    e@Distinct() -> <fail>
    with
      <generate-error(|ctx, $[DISTINCT is not supported])> e

  nabl-constraint(|ctx):
    LitCustomType(_, type) -> <fail>
    with
      <generate-error(|ctx, $[Custom data types are not supported])> type
      
rules

 /* GM-7848 
  nabl-constraint(|ctx):
    t -> <fail>
    where
      <?InDegree(exp) + ?OutDegree(exp) + ?Labels(exp)> t;
      message := $[Function is only defined for vertices];
      if VarRef(v) := exp
      then
        rewrite-task := <var-is-node(|ctx)> exp;
        <task-create-error-on-failure(|ctx, rewrite-task, message)> t
      else
        <not(?GroupRef(_)); !t; generate-error(|ctx, message)> exp
      end 
      
  nabl-constraint(|ctx):
    t -> <fail>
    where
      <?Label(exp)> t;
      message := $[Function is only defined for edges];
      if VarRef(v) := exp
      then
        rewrite-task := <var-is-edge(|ctx)> exp;
        <task-create-error-on-failure(|ctx, rewrite-task, message)> t
      else
        <not(?GroupRef(_)); !t; generate-error(|ctx, message)> exp
      end
      
  nabl-constraint(|ctx):
    t -> <fail>
    where
      <?Has(exp, _) + ?HasLabel(exp, _)> t;
      not ( <?VarRef(_) + ?GroupRef(_)> exp );
      <generate-error(|ctx, "Function is only defined for vertices and edges")> t
*/
