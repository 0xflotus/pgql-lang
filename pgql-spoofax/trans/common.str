module common

imports

  signatures/-
  normalized-signatures
  runtime/editor/-
  names/-

rules

  is-literal = ?Integer(_)
             + ?Decimal(_)
             + ?String(_)
             + ?True() + ?False()
             + ?Date(_) + ?Time(_) + ?Timestamp(_)
             + ?BindVariable(_)

  is-aggregate = ?COUNT(_, _)
               + ?MIN(_, _)
               + ?MAX(_, _)
               + ?SUM(_, _)
               + ?AVG(_, _)
               + ?ARRAY-AGG(_, _)

  is-quantifier = ?BetweenNAndM(_, _)
                + ?ZeroOrMore()
                + ?OneOrMore()
                + ?Optional()
                + ?ExactlyN(_)
                + ?NOrMore(_)
                + ?BetweenZeroAndM(_)

  get-exp-from-aggregation = ?COUNT(_, <id>)
                           + ?MIN(_, <id>)
                           + ?MAX(_, <id>)
                           + ?SUM(_, <id>)
                           + ?AVG(_, <id>)
                           + ?ARRAY-AGG(_, <id>)

  unique-name(|c, origin) = !origin; origin-track-forced(!(<GENERATED>, "_", <next-counter; write-to-string> c); conc-strings)

  GENERATED = !"<<anonymous>>"

  VERTEX_WITHOUT_BRACKETS = !"<<vertex-without-brackets>>"

  make-set-while-preserving-ordering = reverse; make-set; reverse

  is-subquery = ?Subquery(_)

  collect-in-outer-query(s) = collect(is-subquery <+ s); remove-all(is-subquery)

  collect-in-outer-query-outside-aggregation(s) = collect(is-subquery <+ is-aggregate <+ s); remove-all(is-subquery + is-aggregate)

  alltd-in-outer-query(s) = alltd(is-subquery <+ s)

  alltd-in-outer-query-outside-aggregation(s) = alltd(s <+ is-subquery <+ is-aggregate)

  get-aggregations = collect-in-outer-query(is-aggregate)

  to-error-message(|message) = !ErrorMessage(<id>, message)

  // just here to get rid of editor errors in e.g. normalize.str
  origin-track-forced(s) = fail
  origin-text = fail
  origin-offset = fail

  has-at-most-one-binding = ?None() + ?Some(BetweenNAndM(_, "0")) + ?Some(BetweenNAndM(_, "1"))
