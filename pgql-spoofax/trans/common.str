module common

imports

  signatures/-
  normalized-signatures
  runtime/editor/-
  names/-

rules

  is-literal = ?Integer(_) + ?Decimal(_) + ?String(_) + ?True() + ?False() + ?BindVariable(_)
  is-aggregate = ?COUNT(_, _) + ?MIN(_, _) + ?MAX(_, _) + ?SUM(_, _) + ?AVG(_, _) + ?ARRAY-AGG(_, _)
  is-expression = ?Not(_) + ?And(_, _) + ?Or(_, _) + ?Mul(_, _) + ?Add(_, _) + ?Div(_, _) + ?Mod(_, _) +
        ?Sub(_, _) + ?Eq(_, _) + ?Lt(_, _) + ?Gte(_, _) + ?Lte(_, _) + ?Neq(_, _) + ?Legacy10Regex(_, _)
  is-function = ?Legacy10Id(_) + ?Legacy10Label(_) + ?Legacy10Has(_, _) + ?Legacy10InDegree(_) + ?Legacy10OutDegree(_) + ?Legacy10HasLabel(_, _)

  get-exp-from-aggregation = ?COUNT(_, <id>) + ?MIN(_, <id>) + ?MAX(_, <id>) + ?SUM(_, <id>) + ?AVG(_, <id>) + ?ARRAY-AGG(_, <id>)

  GENERATED = !"<<anonymous>>"

  unique-name(|c, origin) = !origin; origin-track-forced(!(<GENERATED>, "_", <next-counter; write-to-string> c); conc-strings)
  
  VERTEX_WITHOUT_BRACKETS = !"<<vertex-without-brackets>>"

  make-set-while-preserving-ordering = reverse; make-set; reverse

  is-subquery = ?Subquery(_)

  collect-in-outer-query(s) = collect(is-subquery <+ s); remove-all(is-subquery)

  collect-in-outer-query-outside-aggregation(s) = collect(is-subquery <+ is-aggregate <+ s); remove-all(is-subquery + is-aggregate)

//  collect-outside-aggregation(s) = collect(is-aggregate <+ s); remove-all(is-aggregate)

  alltd-in-outer-query(s) = alltd(is-subquery <+ s)

  alltd-in-outer-query-outside-aggregation(s) = alltd(s <+ is-subquery <+ is-aggregate)

  get-aggregations = collect-in-outer-query(is-aggregate)

  to-error-message(|message) = !ErrorMessage(<origin-track-forced(!message)> <id>)

  origin-track-forced(s) = fail
  origin-text = fail
  origin-offset = fail
