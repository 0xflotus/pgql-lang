module trans-for-nabl

imports
  
  signatures/-
  sig-normalized
  sig-nabl
  common
  
/*
 * normalizeForNaBL is called after normalize. It's for extra transformations to get the AST in a shape that NaBL likes.
 *   PGQL -> PGQL AST -> PGQL norm. AST -> PGQL AST for NaBL ==> NaBL
 *                                      -> QueryGraph object ==> query planner
 */
rules
  
  trans-for-nabl = alltd(trans-for-nabl-grouping)
  
rules

  // if there is a GROUP BY or aggregation in SELECT then all variables in the SELECT need to be group keys or need to be inside aggregates
  trans-for-nabl-grouping:
    Query(pathPatterns, expAsVars, fromClause, graphPattern, groupBy, orderBy, limitOffsets) ->
    Query(pathPatterns, expAsVars', fromClause, graphPattern, groupBy', orderBy', limitOffsets)
    where
      (!groupBy; ?Some(_)) + (!expAsVars; oncetd(is-aggregate))
    with
      expAsVars' := <to-varOrGroupRefs> expAsVars;
      orderBy' := <to-groupRefs> orderBy;
      groupBy' := <to-groupDefs> groupBy

  to-varOrGroupRefs = alltd(is-aggregate <+ ?VarRef(<id>); !GroupRef(<id>))
  to-groupRefs = alltd(is-aggregate <+ ?VarRef(<id>); !SelectOrGroupRef(<id>))
  
  to-groupDefs = alltd(to-groupDef)
  to-groupDef = ?ExpAsVar(v, exp); !ExpAsGroupVar(v, exp)
