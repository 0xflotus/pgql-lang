module trans-for-nabl

imports

  signatures/-
  normalized-signatures
  common

/*
 * 'trans-for-nabl' is called after 'normalize' and transforms the normalized AST into a shape that works for NaBL.
 *
 *  PGQL String -> PGQL AST -> PGQL normalized AST -> PGQL AST for NaBL -> GraphQuery object -> query plan
 */
rules

  trans-for-nabl = alltd(trans-for-nabl-grouping)

rules

  // if there is a GROUP BY or aggregation in SELECT, then all the variables references in the SELECT need to be group keys or need to be inside aggregates
  trans-for-nabl-grouping:
    NormalizedQuery(pathPatterns, expAsVars, fromClause, graphPattern, groupBy, having, orderBy, limitOffsets, error-messages, version) ->
        NormalizedQuery(pathPatterns, expAsVars', fromClause, graphPattern, groupBy', having, orderBy', limitOffsets, error-messages, version)
    with
      if (!groupBy; ?Some(_)) + (!expAsVars; contains-aggregation)
      then
        expAsVars' := <to-VarRef-or-GroupRefs; to-ExpAsSelectVars> expAsVars
      ; orderBy' := <to-VarRef-or-SelectOrGroupRefs> orderBy
      ; if !expAsVars; contains-aggregation; !groupBy; ?None()
        then groupBy' := CreateOneGroup() // create one group when there's no GROUP BY but SELECT has at least one aggregation
        else groupBy' := <to-ExpAsGroupVars> groupBy
        end
      else
        expAsVars' := expAsVars
      ; orderBy' := <to-VarOrSelectRefs> orderBy
      ; groupBy' := groupBy
      end

  contains-aggregation = oncetd(is-aggregate)

  to-VarRef-or-GroupRefs = alltd(is-aggregate <+ ?VarRef(<id>); !GroupRef(<id>))
  to-VarRef-or-SelectOrGroupRefs = alltd(is-aggregate <+ ?VarRef(<id>); !SelectOrGroupRef(<id>))

  to-ExpAsSelectVars = alltd(to-ExpAsSelectVar)
  to-ExpAsSelectVar = ?ExpAsVar(exp, v); !ExpAsSelectVar(exp, v)

  to-ExpAsGroupVars = alltd(to-ExpAsGroupVar)
  to-ExpAsGroupVar = ?ExpAsVar(exp, v); !ExpAsGroupVar(exp, v)
  to-ExpAsGroupVar = ?AnonymousExpAsVar(exp, v); !AnonymousExpAsGroupVar(exp, v)

  to-VarOrSelectRefs = alltd(?VarRef(<id>); !VarOrSelectRef(<id>))
