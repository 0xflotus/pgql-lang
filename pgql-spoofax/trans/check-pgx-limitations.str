/*
 * PGX-specific error checks. Remove the import of this file from trans/analysis.str if your query engine is not PGX.
 */
module check-pgx-limitations

imports

  runtime/task/-
  signatures/-
  normalized-signatures
  common
  check

rules

  nabl-constraint(|ctx):
    t -> <fail>
    where
      <?Has(_, exp) + ?HasLabel(_, exp) + ?Regex(_, exp)> t;
      not ( String(_) := exp );
      <generate-error(|ctx, "String expected")> exp

  nabl-constraint(|ctx):
    Constraints(constraints) -> <fail>
    where
      constraintsWithoutVarRef := <remove-all(oncetd(?VarRef(_)))> constraints;
      <batch-generate-error(|ctx, "Constraint should include at least one variable")> constraintsWithoutVarRef

  nabl-constraint(|ctx):
    t@Null() -> <fail>
    where
      <generate-error(|ctx, "NULL is not supported")> t

rules // Not a connected graph, e.g. WHERE x -> y, x2 -> y2
  
  nabl-constraint(|ctx):
    GraphPattern(Vertices(vertices), Edges(edges), Paths(paths), _) -> <fail>
    where
      connections := <conc> (edges, paths);
      sorted-partitions := <strip-annos; partition(|connections); reverse; qsort(length-gt)> vertices;
      biggest-partition := <Hd> sorted-partitions;
      other-partitions := <Tl> sorted-partitions
    with
      <map(connected-pattern-constraint(|ctx, biggest-partition))> other-partitions

  connected-pattern-constraint(|ctx, biggest-partition):
    other-partition -> <id>
    with
      if 1 := <length> biggest-partition
      then
        m := $[Vertex [<Hd> other-partition] is not connected to vertex [<Hd> biggest-partition]]
      else
        if 1 := <length> other-partition
        then m := $[Vertex [<Hd> other-partition] is not connected to vertices [<print-vertices> biggest-partition]]
        else m := $[Vertices [<print-vertices> other-partition] are not connected to vertices [<print-vertices> biggest-partition]]
        end
      end;
      <generate-error(|ctx, m)> other-partition

  print-vertices = reverse; separate-by(|", "); concat-strings

  length-gt = ?(l1, l2); !(<length> l1, <length> (l2)); gt

  partition(|connections):
    vertices -> partitions
    with
      vertices' := <map(?Vertex(<id>))> vertices;
      if [] := vertices
      then
        partitions := []
      else
        someVertex := <Hd; get-reachable-vertices(|connections)> vertices';
        partitions := <partition-helper(|vertices', connections)> [someVertex]
      end
      
  partition-helper(|vertices, connections):
    partitions -> partitions'
    with
      covered := <concat> partitions;
      uncovered := <diff> (vertices, covered);
      if [] := uncovered
      then
        partitions' := partitions
      else
        partition := <Hd; get-reachable-vertices(|connections)> uncovered;
        partitions' := <partition-helper(|vertices, connections)> [partition|partitions]
      end

  get-reachable-vertices(|connections):
    x -> result
    with
      vertices := <is-list <+ ![<id>]> x;
      vertices' := <map(get-reachable-vertices-helper(|connections));  concat; make-set> vertices;
      if <eq> (<length> vertices, <length> vertices')
      then result := vertices'
      else result := <get-reachable-vertices(|connections)> vertices'
      end

  get-reachable-vertices-helper(|connections):
    vertex -> result
    with
      outNeighbors := <filter(?Edge(vertex, _, <id>, _) + ?Path(vertex, <id>, _, _, _))> connections;
      inNeighbors := <filter(?Edge(<id>, _, vertex, _) + ?Path(<id>, vertex, _, _, _))> connections;
      result := <conc> (outNeighbors, inNeighbors, [vertex])

// RPQs

  nabl-constraint(|ctx):
    PathPattern(_, _, connections, constraints) -> <id>
    with
      <alltd(rpq-constraint-limitation(|ctx))> constraints;
      <alltd(nested-path-pattern-limitation(|ctx))> connections
      
  rpq-constraint-limitation(|ctx):
    VarRef(v) -> <id>
    with
      var-is-vertex := <var-is-vertex(|ctx)> v;
      <task-create-error-on-success(|ctx, var-is-vertex, $[Constraints on vertices in path patterns not yet supported])> v

  nested-path-pattern-limitation(|ctx):
    PathPatternRef(p) -> <id>
    with
      <generate-error(|ctx, "Nested path patterns not yet supported")> p

  nabl-constraint(|ctx):
    Or(_, PathPatternRef(p)) -> <fail>
    where
      <generate-error(|ctx, "Alternative path patterns not yet supported")> p
            
  nabl-constraint(|ctx):
    Path(_, _, t@PathPatternRef(r), None(), _) -> <id>
    with
      <generate-error(|ctx, $<For now, Kleene star required here: <r>*>)> t
