module normalize

imports
  
  signatures/-
  stratego/-
  sig-normalized
  sig-nabl
  common
  pp
  check
  
rules
  
  normalize-before:
    ast -> result
    with
      c := <new-counter>;
      result := <
      	alltd(norm-UMin);
        innermost(
          norm-NOT +
          norm-singleNode +
          norm-simpleNode +
          norm-edgeContents
        );
        alltd(norm-string);
        alltd(norm-has-prop);
        alltd(name-unnamed-elems(|c));
        alltd(norm-inlined-references);
        bottomup(try(
           norm-matchElems
        ));
        bottomup(try(origin-track-forced(norm-query(|c))))
      > ast

rules

  norm-UMin = ?UMin(Decimal(string)); !Decimal(<conc-strings> ("-", string))
  
  norm-NOT = ?Not1(<id>); !Not(<id>)
  norm-NOT = ?Not2(<id>); !Not(<id>)
  
  norm-string = is-string; try(un-double-quote + un-single-quote)
  
rules
  
  norm-singleNode = ?SingleNode(Some(ElemContents1(a, b, c, d))); !Path(Node(ElemContents(a, Some(b), c, d)), [], None())
  norm-singleNode = ?SingleNode(Some(ElemContents2(a, b, c, d))); !Path(Node(ElemContents(a, b, Some(c), d)), [], None())
  norm-singleNode = ?SingleNode(Some(ElemContents3(a, b, c, d))); !Path(Node(ElemContents(a, b, c, Some(d))), [], None())
  norm-singleNode = ?SingleNode(None()); !Path(Node(ElemContents(None(), None(), None(), None())), [], None()) // SELECT * WHERE ()
  norm-singleNode = ?Constraint(VarRef(<id>)); !Path(SimpleNode(<id>), [], None()); oncetd(norm-simpleNode)
  
  norm-simpleNode =?SimpleNode(<id>); !Node(ElemContents(Some(<id>), None(), None(), None()))
  
  norm-edgeContents = ?Some(EdgeContents(<id>))
  
  name-unnamed-elems(|c) = ?ElemContents(None(), type, id', constraints); !ElemContents(Some(<unique-name(|c)>), type, id', constraints)
  name-unnamed-elems(|c) = OutConn(?None(); name-unnamed-elems-helper(|c)) +
                           InConn(?None(); name-unnamed-elems-helper(|c))
  name-unnamed-elems(|c) = ?OutEdge(); !OutConn(<name-unnamed-elems-helper(|c)>) +
                           ?InEdge(); !InConn(<name-unnamed-elems-helper(|c)>) +
                           ?Path(None(), pathPatternRef, kleeneStar); !Path(Some(<unique-name(|c)> ""), pathPatternRef, kleeneStar)
  name-unnamed-elems-helper(|c) = !ElemContents(Some(<unique-name(|c)> ""), None(), None(), None())
  
  norm-inlined-references = ?ElemContents(Some(varName), _, _, _); alltd(norm-inlined-reference(|varName))
  norm-inlined-reference(|varName) =
    ?Obj(dot); !VarRef(varName) + (?Obj(VarRef(v), dot) + ?PropRef(VarRef(v), _));
    if <eq> (v, varName)
    then !ReferenceInInlinedConstraint(v)
    else !CrossReferenceInInlinedConstraint()
    end +
    (?SelfPropRef(propName) + ?SelfPropRef(dot, propName)); !PropRef(VarRef(varName), propName)

rules
  
  norm-matchElems:
    GraphPattern(elems) -> GraphPattern(nodes, edges, paths'', constraints)
    with
      paths := <filter(?Path(_, _, _))> elems;
      inlined-constraints-for-nodes := <collect-om(?Node(<id>)); map(get-inlined-constraints(|"node")); concat> paths;
      inlined-constraints-for-edges := <collect-om(?OutConn(<id>) + ?InConn(<id>)); filter(get-inlined-constraints(|"edge")); concat> paths;
      non-inlined-constraints := <filter(?Constraint(<id>))> elems;
      constraints := <conc; flatten-list; !Constraints(<id>)> (inlined-constraints-for-nodes, inlined-constraints-for-edges, non-inlined-constraints);
      paths' := <alltd(?ElemContents(Some(<id>), _, _, _))> paths;
      nodes := <collect-om(?Node(_)); !Nodes(<id>)> paths';
      connections := <get-edges> paths';
      edges := <filter(?Edge(_, _, _, _)); !Edges(<id>)> connections;
      paths'' := <filter(?Path(_, _, _, _, _)); !Paths(<id>)> connections
  
  norm-path-pattern:
    PathPattern(name, path) -> PathPattern(name, nodes, connections, constraints)
    with
      inlined-constraints-for-nodes := <collect-om(?Node(<id>)); map(get-inlined-constraints(|"node")); concat> path;
      inlined-constraints-for-edges := <collect-om(?OutConn(<id>) + ?InConn(<id>)); filter(get-inlined-constraints(|"edge")); concat> path;
      constraints := <conc; flatten-list; !Constraints(<id>)> (inlined-constraints-for-nodes, inlined-constraints-for-edges);
      path' := <alltd(?ElemContents(Some(<id>), _, _, _))> path;
      nodes := <collect-om(?Node(_), conc); !Nodes(<id>)> path';
      connections := <get-edges> [path']
  
  get-inlined-constraints(|nodeOrEdge):
    ElemContents(Some(var), label, id', otherConstraint) -> [labels, identifiers, otherConstraint']
    with
      labels := <?Some(Labels(<id>)); to-label-constraints(|var, nodeOrEdge) <+ ![]> label;
    	identifiers := <?Some(Ids(<id>)); to-id-constraints(|var) <+ ![]> id';
    	otherConstraint' := <?Some(Constraint(<id>)) <+ ![]> otherConstraint
  
  to-label-constraints(|var, nodeOrEdge):
    labels -> result
    with
      if "node" := nodeOrEdge
      then result := <to-hasLabel-expressions(|var)> labels
      else result := <to-label-equals-expressions(|var)> labels
      end
  to-hasLabel-expressions(|var) = bottomup(try(is-literal; !HasLabel(<origin-track-forced(!VarRef(var))> <id>, <id>)))
  to-label-equals-expressions(|var) = bottomup(try(is-literal; !Eq(<origin-track-forced(!Label(VarRef(var)))> <id>, <id>)))
  to-id-constraints(|var) = bottomup(try(is-literal; !Eq(Id(VarRef(var)), <id>)))
  
  // base case: no paths
  get-edges:
    [] -> []
  
  // head is path with only one node => get neighbors for the other paths
  get-edges:
    [Path(_, [], _)|otherPaths] -> <get-edges> otherPaths
  
  // paths with more than one node
  get-edges:
    [Path(
      Node(n1),
      edgeNodes@[EdgeNode(e, Node(n2))|_],
      _)
    |otherPaths] -> <conc> ([edge], edgesPathTail, edgesTailPaths)
    with
      edge := <to-edge> (n1, e, n2);
      edgesPathTail := <get-edges> edgeNodes;
      edgesTailPaths := <get-edges> otherPaths
  
  // base case: only one edgeNode
  get-edges:
    [EdgeNode(_, _)] -> []
    
  // two or more edgeNodes
  get-edges:
    [EdgeNode(_, Node(n1)) | edgeNodes@[EdgeNode(e, Node(n2))|_]]
    -> <conc> ([edge], edgesPathTail)
    with
      edge := <to-edge> (n1, e, n2);
      edgesPathTail := <get-edges> edgeNodes
  
  to-edge:
    (n1, e, n2) -> expansion
    with
      switch !e
        case ?OutConn(edgeOrPath):
          src := n1;
          dst := n2;
          dir := Outgoing()
        case ?InConn(edgeOrPath):
          src := n2;
          dst := n1;
          dir := Incoming()
        otherwise: fail
      end;
      switch !edgeOrPath
        case is-string:
          expansion := Edge(src, edgeOrPath, dst, dir)
        case ?Some(Path(Some(pathName), pathPatternName, kleeneStar)):
          expansion := Path(src, dst, pathPatternName, kleeneStar, pathName)
        otherwise: fail
      end
  
rules
  
  norm-has-prop = ?Has(varRef, <id>); map(!Has(varRef, String(<id>))); create-conjunct
  
  create-conjunct = reverse; !(<Tl>, <Hd>); foldl(create-OR)
  create-OR = ?(exp1, exp2); !And(exp1, exp2)

rules
  
  norm-query(|c):
    Query(pathPatterns, SelectClause(distinctOrReduced, selectElems), graphName, graphPattern, SolutionModifier(ungroupAs, groupBy, having, orderBy, limitOffsets)) -> Query(pathPatterns', projection', graphName, graphPattern, groupBy', orderByElems, limitOffsets')
    with
      pathPatterns' := <map(norm-path-pattern); !PathPatterns(<id>)> pathPatterns;
    
      expAsGroupVars := <?Some(GroupClause(<id>)) <+ ![]> groupBy;
      expAsGroupVars' := <map(norm-expAsGroupVar(|c))> expAsGroupVars;
      groupBy' := <?Some(_); !Some(GroupClause(expAsGroupVars')) <+ !None()> groupBy;

      expAsSelectVars := <?ExpAsVars(<id>); map(replace-terms-with-varRef(|expAsGroupVars')) <+
                          norm-select-star(|graphPattern, expAsGroupVars')> selectElems;
      expAsSelectVars' := <map(name-select-expression(|c))> expAsSelectVars;
      projection' := Vars(ExpAsVars(expAsSelectVars'));
      
      allExpAsVars := <conc> (<remove-all(?ExpAsVar(_, <id>); not(is-aggregate))> expAsSelectVars', expAsGroupVars');
      orderByElems := <try(norm-orderBy(|allExpAsVars))> orderBy;

      limitOffsets' := <norm-limitOffsets> limitOffsets
  
  norm-select-star(|graphPattern, group-exps):
    Star() -> expAsSelectVars
    with if [] := group-exps
           then vars := <collect((?Node(<id>) + ?Edge(_, <id>, _, _)); not(is-substring(GENERATED)))> graphPattern
           else vars := <map(?ExpAsVar(<id>, _))> group-exps
         end
       ; expAsSelectVars := <map(!ExpAsVar(VarRef(<id>), None()))> vars
  
  norm-expAsGroupVar(|c) = ?ExpAsVar(term, Some(VarAssign(VarDef(v)))); !ExpAsVar(v, term)
  norm-expAsGroupVar(|c) = ?ExpAsVar(term, None()); !ExpAsVar(<origin-text; add-unique-suffix(|c)> term, term)

  norm-select-expression(|group-expressions):
    ExpAsVar(exp, var) -> ExpAsVar(exp', var)
    with exp' := <replace-terms-with-varRef(|group-expressions)> exp
      
  name-select-expression(|c): ExpAsVar(exp, Some(VarAssign(VarDef(v)))) -> ExpAsVar(v, exp)
  name-select-expression(|c):
    ExpAsVar(exp, None()) -> ExpAsVar(v, exp)
    with v := <(origin-text <+ ?VarRef(<id>)); add-unique-suffix(|c)> exp

  replace-terms-with-varRef(|expressions):
    exp -> exp'
    with exp' := <foldl(replace-terms-with-varRef)> (expressions, exp)

  replace-terms-with-varRef = ?(ExpAsVar(var, term), <id>); alltd(
    is-aggregate; ?term; !VarRef(var) + // for ORDER BY
    is-aggregate + ?term; !VarRef(var)) // for SELECT: never look into aggregates

  norm-orderBy(|allExpAsVars):
  	Some(OrderClause(elems)) -> Some(OrderClause(elems'))
  	with
  		elems' := <map(norm-orderBy-ordering); map(norm-order-expression(|allExpAsVars))> elems

  norm-orderBy-ordering =
    ((?Desc1(<id>) + ?Desc2(<id>)); !OrderByElem(<id>, Desc())) <+
    ((try(?Asc1(<id>) + ?Asc2(<id>))); !OrderByElem(<id>, Asc()))

  norm-order-expression(|group-and-select-expressions):
  	OrderByElem(exp, ordering) -> OrderByElem(exp', ordering)
  	with
  	  exp' := <replace-terms-with-varRef(|group-and-select-expressions)> exp

  norm-limitOffsets = ?None(); !LimitOffsetClauses(None(), None())
  norm-limitOffsets = ?Some(LimitOffsetClauses(limitClause, offsetClause)); !LimitOffsetClauses(Some(limitClause), offsetClause)
  norm-limitOffsets = ?Some(OffsetLimitClauses(offsetClause, limitClause)); !LimitOffsetClauses(limitClause, Some(offsetClause))

rules // normalization after error checking
  
  normalize-after = alltd(norm-order-by-aggr-in-select-no-groupBy)

  norm-order-by-aggr-in-select-no-groupBy:
  	Select(distinct, select, groupBy, having, orderByElems, limitOffsets) ->
    Select(distinct, select, groupBy, having, None(), limitOffsets)
    where
    	None() := groupBy;
    	<oncetd(is-aggregate)> select
