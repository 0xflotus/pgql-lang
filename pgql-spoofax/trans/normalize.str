module normalize

imports

  stratego/-
  signatures/-
  normalized-signatures
  common
  pp

rules

  normalize-before:
    ast -> result
    with
      bindVariable-counter := <new-counter>;
      deprecations := <collect-om(get-deprecation)> ast;
      result := <
        alltd(norm-has-prop);
        alltd(norm-pgql10);
      	alltd(norm-BindVariable(|bindVariable-counter));
      	alltd(norm-UMin);
        innermost(
          norm-NOT +
          norm-NEQ +
          norm-singleVertex +
          norm-VertexWithoutBrackets
        );
      	alltd(norm-edgeContents);
        alltd(norm-string);
        alltd(norm-hop-distance);
        alltd(name-unnamed-elems);
        alltd(norm-inlined-references);
        bottomup(try(
           norm-matchElems
        ));
        bottomup(try(origin-track-forced(norm-query)))
      > ast

rules

  get-deprecation = (?OutConn(None()) + ?InConn(None()) + ?UndirectedEdge(None())); to-deprecation(|"Use \"-\" instead of \"--\"")
  get-deprecation = ?Pgql10AsignSymbol(); to-deprecation(|"Use \"AS\" instead of \":=\"")

  get-deprecation = ?Legacy10Label(_); to-deprecation(|"Use \"label(x)\" instead of \"x.label()\"")
  get-deprecation = ?Legacy10Labels(_); to-deprecation(|"Use \"labels(x)\" instead of \"x.labels()\"")
  get-deprecation = ?Legacy10HasLabel(_, _); to-deprecation(|"Use \"has_label(x, 'lbl')\" instead of \"x.hasLabel('lbl')\"")
  get-deprecation = ?Legacy10Id(_); to-deprecation(|"Use \"id(x)\" instead of \"x.id()\"")
  get-deprecation = ?Legacy10Has(_, _); to-deprecation(|"Use \"x.prop IS NULL\" instead of \"x.has(prop)\"")
  get-deprecation = ?Legacy10InDegree(_); to-deprecation(|"Use \"in_degree(x)\" instead of \"x.indegree()\"")
  get-deprecation = ?Legacy10OutDegree(_); to-deprecation(|"Use \"out_degree(x)\" instead of \"x.out_degree()\"")

  get-deprecation = ?String(<id>); is-double-quoted; to-deprecation(|"Use single quotes for character string literals (not double quotes)")
  get-deprecation = ?Ids(_); to-deprecation(|"Use \"id(x) = xyz\" instead of \"@xyz\"")
  get-deprecation = ?InlinedConstraint(_); to-deprecation(|"Constraints should be specified in the WHERE clause instead of the WTIH")
  get-deprecation = ?Legacy10Not(_); to-deprecation(|"Use \"NOT\" instead of \"!\"")
  get-deprecation = ?Legacy10CallStatement(_, _, _); to-deprecation(|"Use \"func(..)\" instead of \"CALL func(..)\"")
  get-deprecation = ?Legacy10Regex(_, _); to-deprecation(|"Use \"java_regexp_like(exp1, exp2)\" instead of \"exp1 =~ exp2\"")
//  get-deprecation = ?Legacy10Not(_); to-deprecation(|"ORDER BY vertex or edge not allowed")

  // pgql 1.0 should not allow FROM or EXISTS 

  to-deprecation(|message) = !Deprecation(<origin-track-forced(!message)> <id>)

  norm-pgql10 = ?Legacy10Label(x); <to-function(|"label")> [x]
  norm-pgql10 = ?Legacy10Labels(x); <to-function(|"labels")> [x]
  norm-pgql10 = ?Legacy10HasLabel(x, lbl); <to-function(|"has_label")> [x, lbl]
  norm-pgql10 = ?Legacy10Id(x); <to-function(|"id")> [x]
  norm-pgql10 = ?Legacy10Has(x, prop); <to-function(|"has_prop")> [x, prop]
  norm-pgql10 = ?Legacy10InDegree(x); <to-function(|"in_degree")> [x]
  norm-pgql10 = ?Legacy10OutDegree(x); <to-function(|"out_degree")> [x]
  norm-pgql10 = ?Legacy10Regex(x, regex); <to-function(|"java_regexp_like")> [x, regex]

  to-function(|name):
    args -> FunctionCall(None(), name, args)

  norm-BindVariable(|c) = ?BindVariable(); !BindVariable(<next-counter> c)

  norm-UMin = ?UMin(Decimal(string)); !Decimal(<conc-strings> ("-", string))

  norm-NOT = ?Legacy10Not(<id>); !Not(<id>)

  norm-NEQ = ?Neq1(exp1, exp2); !Neq(exp1, exp2)
  norm-NEQ = ?Neq2(exp1, exp2); !Neq(exp1, exp2)

  norm-string = String(norm-string-helper) + PropRef(id, norm-string-helper) + FromClause(norm-string-helper)
              + Date(un-single-quote)
              + Time(un-single-quote)
              + Timestamp(un-single-quote)
  norm-string-helper = un-double-quote + un-single-quote

rules

  norm-singleVertex = ?SingleVertex(elemContents); !PathPattern(Vertex(elemContents), []) // SELECT * WHERE ()

  norm-VertexWithoutBrackets = ?VertexWithoutBrackets(v); !Vertex(ElemContents(Some(<origin-track-forced(<conc-strings> (v, <VERTEX_WITHOUT_BRACKETS>))>), None(), None(), None()))

  norm-edgeContents = ?Some(EdgeContents(<id>))

  name-unnamed-elems     = (?CommonPathExpression(_, _, _, _) + ?GraphPattern(_)); where (c := <new-counter>); alltd(name-unnamed-elems(|c))
  name-unnamed-elems(|c) = ?ElemContents(None(), type, id', constraints); !ElemContents(Some(<unique-name(|c)>), type, id', constraints)
  name-unnamed-elems(|c) = OutConn(?None(); name-unnamed-elems-helper(|c)) +
                           InConn(?None(); name-unnamed-elems-helper(|c)) +
                           UndirectedEdge(?None(); name-unnamed-elems-helper(|c))
  name-unnamed-elems(|c) = ?OutEdge(); !OutConn(<name-unnamed-elems-helper(|c)>) +
                           ?InEdge(); !InConn(<name-unnamed-elems-helper(|c)>) +
                           ?UndirectedEdge(); !UndirectedEdge(<name-unnamed-elems-helper(|c)>) +
                           ?Path(None(), pathPatternRef, kleeneStar); !Path(Some(<unique-name(|c)>), pathPatternRef, kleeneStar)
  name-unnamed-elems-helper(|c) = !ElemContents(Some(<unique-name(|c)>), None(), None(), None())

  norm-inlined-references = ?ElemContents(Some(varName), _, _, _); alltd(norm-inlined-reference(|varName))
  norm-inlined-reference(|varName) =
    ?Obj(dot); !VarRef(varName) + (?Obj(VarRef(v), dot) + ?PropRef(VarRef(v), _));
    if <eq> (v, varName)
    then !ReferenceInInlinedConstraint(v)
    else !CrossReferenceInInlinedConstraint(v)
    end +
    (?SelfPropRef(propName) + ?SelfPropRef(dot, propName)); !PropRef(VarRef(varName), propName)

rules

  norm-matchElems:
    GraphPattern(elems) -> GraphPattern(vertices, edges, pathPatterns'', constraints)
    with
      pathPatterns := <filter(?PathPattern(_, _))> elems;
      inlined-constraints-for-vertices := <collect-om(?Vertex(<id>)); map(get-inlined-constraints(|"vertex")); concat> pathPatterns;
      inlined-constraints-for-edges := <collect-om(?OutConn(<id>) + ?InConn(<id>) + ?UndirectedEdge(<id>)); filter(get-inlined-constraints(|"edge")); concat> pathPatterns;
      non-inlined-constraints := <filter(?Constraint(<id>))> elems;
      constraints := <conc; flatten-list; !Constraints(<id>)> (inlined-constraints-for-vertices, inlined-constraints-for-edges, non-inlined-constraints);
      pathPatterns' := <alltd(?ElemContents(Some(<id>), _, _, _))> pathPatterns;
      vertices := <collect-om(?Vertex(_)); !Vertices(<id>)> pathPatterns';
      connections := <get-edges> pathPatterns';
      edges := <filter(?Edge(_, _, _, _)); !Edges(<id>)> connections;
      pathPatterns'' := <filter(?Path(_, _, _, _, _, _)); !Paths(<id>)> connections

  norm-common-path-expression:
    CommonPathExpression(name, _, path, whereClause) -> CommonPathExpression(name, vertices, connections, constraints)
    with
      inlined-constraints-for-vertices := <collect-om(?Vertex(<id>)); map(get-inlined-constraints(|"vertex")); concat> path;
      inlined-constraints-for-edges := <collect-om(?OutConn(<id>) + ?InConn(<id>) + ?UndirectedEdge(<id>)); filter(get-inlined-constraints(|"edge")); concat> path;
      non-inlined-constraints := <(?None(); ![]) <+ (?Some(WhereClause(<id>)); ![<id>])> whereClause;
      constraints := <concat; flatten-list; !Constraints(<id>)> [inlined-constraints-for-vertices, inlined-constraints-for-edges, non-inlined-constraints];
      path' := <alltd(?ElemContents(Some(<id>), _, _, _))> path;
      vertices := <collect-om(?Vertex(_), conc); !Vertices(<id>)> path';
      connections := <get-edges> [path']

  get-inlined-constraints(|vertexOrEdge):
    ElemContents(Some(var), label, id', otherConstraint) -> [labels, identifiers, otherConstraint']
    with
      labels := <?Some(Labels(<id>)); to-label-constraints(|var, vertexOrEdge) <+ ![]> label;
      identifiers := <?Some(Ids(<id>)); to-id-constraints(|var) <+ ![]> id';
      otherConstraint' := <?Some(InlinedConstraint(<id>)) <+ ![]> otherConstraint

  to-label-constraints(|var, vertexOrEdge):
    labels -> result
    with
      if "vertex" := vertexOrEdge
      then result := <to-hasLabel-expressions(|var)> labels
      else result := <to-label-equals-expressions(|var)> labels
      end
  to-hasLabel-expressions(|var) = bottomup(try(is-literal; ![VarRef(var), <id>]; to-function(|"has_label")))
  to-label-equals-expressions(|var) = bottomup(try(is-literal; !Eq(<to-function(|"label")> [VarRef(var)], <id>)))
  to-id-constraints(|var) = bottomup(try(is-literal; origin-track-forced(!Eq(<to-function(|"id")> [VarRef(var)], <id>))))

  // base case: no paths
  get-edges:
    [] -> []

  // head is path with only one vertex => get neighbors for the other paths
  get-edges:
    [PathPattern(_, [])|otherPaths] -> <get-edges> otherPaths

  // paths with more than one vertex
  get-edges:
    [PathPattern(
      Vertex(n1),
      edgeVertices@[EdgeVertex(e, Vertex(n2))|_])
    |otherPaths] -> <conc> ([edge], edgesPathTail, edgesTailPaths)
    with
      edge := <to-edge> (n1, e, n2);
      edgesPathTail := <get-edges> edgeVertices;
      edgesTailPaths := <get-edges> otherPaths

  // base case: only one edgeVertex
  get-edges:
    [EdgeVertex(_, _)] -> []
    
  // two or more edgeVertices
  get-edges:
    [EdgeVertex(_, Vertex(n1)) | edgeVertices@[EdgeVertex(e, Vertex(n2))|_]]
    -> <conc> ([edge], edgesPathTail)
    with
      edge := <to-edge> (n1, e, n2);
      edgesPathTail := <get-edges> edgeVertices

  to-edge:
    (n1, e, n2) -> expansion
    with
      switch !e
        case ?OutConn(edgeOrPath):
          src := n1;
          dst := n2;
          dir := Outgoing()
        case ?InConn(edgeOrPath):
          src := n2;
          dst := n1;
          dir := Incoming()
        case ?UndirectedEdge(edgeOrPath):
          src := n1;
          dst := n2;
          dir := Undirected()
        otherwise: fail
      end;
      switch !edgeOrPath
        case is-string:
          expansion := Edge(src, edgeOrPath, dst, dir)
        case ?Some(Path(Some(pathName), pathPatternName, quantifier)):
          expansion := Path(src, dst, pathPatternName, quantifier, pathName, dir)
        otherwise: fail
      end

rules

  norm-has-prop = ?Legacy10Has(varRef, [prop]); !Legacy10Has(varRef, prop) <+
                  ?Legacy10Has(varRef, <id>); map(!Legacy10Has(varRef, <id>)); create-conjunct

  create-conjunct = reverse; !(<Tl>, <Hd>); foldl(create-OR)
  create-OR = ?(exp1, exp2); !And(exp1, exp2)

rules

  norm-hop-distance = ?ZeroOrMore(); !BetweenNAndM("0", "-1")
  norm-hop-distance = ?OneOrMore(); !BetweenNAndM("1", "-1")
  norm-hop-distance = ?Optional(); !BetweenNAndM("0", "1")
  norm-hop-distance = ?ExactlyN(n); !BetweenNAndM(n, n)
  norm-hop-distance = ?NOrMore(n); !BetweenNAndM(n, "-1")
  norm-hop-distance = ?BetweenZeroAndM(m); !BetweenNAndM("0", m)

rules

  // pgql 1.1
  norm-query:
    Query(commonPathExpressions, selectClause, fromClause, graphPattern, whereClause, groupByClause, orderByClause, limitOffsets) ->
      <norm-query> Query(commonPathExpressions, selectClause, fromClause, graphPattern', groupByClause, orderByClause, limitOffsets)
    with
      <?GraphPattern(vertices, edges, paths, Constraints(inlined-constraints))> graphPattern;
      non-inlined-constraints := <?Some(WhereClause(<id>)); ![<id>] + ?None(); ![]> whereClause;
      constraints := Constraints(<conc> (inlined-constraints,  non-inlined-constraints));
      graphPattern' := GraphPattern(vertices, edges, paths, constraints)

  // pgql 1.0
  norm-query:
    Query(commonPathExpressions, SelectClause(projection), fromClause, graphPattern, groupByClause, orderByClause, limitOffsets) ->
        Query(commonPathExpressions', projection', fromClause, graphPattern, groupByClause', orderByElems, limitOffsets')
    with
      commonPathExpressions' := <map(norm-common-path-expression); !CommonPathExpressions(<id>)> commonPathExpressions;

      expAsGroupVars := <?Some(GroupByClause(<id>)) <+ ![]> groupByClause;
      expAsGroupVars' := <map(norm-ExpAsVar)> expAsGroupVars;
      groupByClause' := <?Some(_); !Some(GroupByClause(expAsGroupVars')) <+ !None()> groupByClause;

      expAsSelectVars := <?ExpAsVars(<id>); map(norm-ExpAsVar); map(replace-terms-with-varRef(|expAsGroupVars')) <+
                          norm-select-star(|graphPattern, expAsGroupVars'); map(norm-ExpAsVar)> projection;
      projection' := Vars(ExpAsVars(expAsSelectVars));

      allExpAsVars := <conc> (expAsGroupVars', expAsSelectVars);
      orderByElems := <try(norm-orderBy(|allExpAsVars))> orderByClause;

      limitOffsets' := <norm-limitOffsets> limitOffsets

  norm-select-star(|graphPattern, group-exps):
    Star() -> expAsSelectVars
    with if [] := group-exps
           then vars := <collect((?Vertex(<id>) + ?Edge(_, <id>, _, _)); not(is-substring(GENERATED)))> graphPattern
           else vars := <map(?ExpAsVar(_, <id>))> group-exps
         end
       ; expAsSelectVars := <map(!ExpAsVar(VarRef(<id>), None()))> vars

  norm-ExpAsVar = ?ExpAsVar(exp, Some(VarAssign(VarDef(v)))); !ExpAsVar(exp, v)
  norm-ExpAsVar = ?ExpAsVar(exp, None()); !AnonymousExpAsVar(exp, <?VarRef(<id>) <+ origin-track-forced(origin-text)> exp)

  replace-terms-with-varRef(|expressions):
    exp -> exp'
    with exp' := <foldl(replace-terms-with-varRef)> (expressions, exp)

  replace-terms-with-varRef = (?(ExpAsVar(term, var), <id>) + ?(AnonymousExpAsVar(term, var), <id>)); alltd(
    is-aggregate; ?term; !VarRef(var) + // for ORDER BY
    is-aggregate + ?term; !VarRef(var)) // for SELECT: never look into aggregates

  norm-orderBy(|allExpAsVars):
    Some(OrderByClause(elems)) -> Some(OrderByClause(elems'))
    with
      elems' := <map(norm-orderBy-ordering); map(norm-order-expression(|allExpAsVars))> elems

  norm-orderBy-ordering =
    ((?Desc(<id>) + ?Legacy10Desc(<id>)); !OrderByElem(<id>, Desc())) <+
    ((try(?Asc(<id>) + ?Legacy10Asc(<id>))); !OrderByElem(<id>, Asc()))

  norm-order-expression(|group-and-select-expressions):
    OrderByElem(exp, ordering) -> OrderByElem(exp', ordering)
    with
      exp' := <replace-terms-with-varRef(|group-and-select-expressions)> exp

  norm-limitOffsets = ?None(); !LimitOffsetClauses(None(), None())
  norm-limitOffsets = ?Some(LimitOffsetClauses(limitClause, offsetClause)); !LimitOffsetClauses(Some(limitClause), offsetClause)
  norm-limitOffsets = ?Some(OffsetLimitClauses(offsetClause, limitClause)); !LimitOffsetClauses(limitClause, Some(offsetClause))
