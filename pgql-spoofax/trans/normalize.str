module normalize

imports

  stratego/-
  signatures/-
  normalized-signatures
  common
  pp
  runtime/index/-
  runtime/nabl/-
  runtime/properties/-
  runtime/types/-
  runtime/task/-
  runtime/analysis/-
  runtime/editor/-
  names/-

rules

  normalize-before:
    ast -> result
    with
      variable-counter := <new-counter>;
      bindVariable-counter := <new-counter>;
      error-messages := <is-pgql10; collect(get-pgql10-limitation) <+ collect(get-deprecation); not(?[]) <+ get-all-path-limitations> ast;
      result := <
        alltd(norm-has-prop);
        alltd(norm-pgql10);
      	alltd(norm-BindVariable(|bindVariable-counter));
      	alltd(norm-UMin);
        innermost(
          norm-NOT +
          norm-NEQ +
          norm-singleVertex +
          norm-VertexWithoutBrackets
        );
      	alltd(norm-edgeContents);
        alltd(norm-string);
        alltd(norm-timezone);
        alltd(norm-hop-distance);
        alltd(name-unnamed-elems(|variable-counter));
        alltd(norm-inlined-references);
        bottomup(try(
           norm-matchElems(|variable-counter)
        ));
        bottomup(try(origin-track-forced(norm-query(|error-messages, variable-counter))))
      > ast

rules

  is-pgql10 = ?Pgql10Query(_, _, _, _, _, _, _) // pgql 1.0 has 7 sub-terms while pgql 1.1 has 8

  get-deprecation = (?OutConn(None(), _) + ?InConn(None(), _) + ?UndirectedEdge(None(), _)); to-error-message(|"Use [-] instead of [--]")
  get-deprecation = ?Pgql10AsignSymbol(); to-error-message(|"Use [AS] instead of [:=]")
  get-deprecation = ?Legacy10Label(_); to-error-message(|"Use [label(x)] instead of [x.label()]")
  get-deprecation = ?Legacy10Labels(_); to-error-message(|"Use [labels(x)] instead of [x.labels()]")
  get-deprecation = ?Legacy10HasLabel(_, _); to-error-message(|"Use [has_label(x, 'lbl')] instead of [x.hasLabel('lbl')]")
  get-deprecation = ?Legacy10Id(_); to-error-message(|"Use [id(x)] instead of [x.id()]")
  get-deprecation = ?Legacy10Has(_, _); to-error-message(|"Use [x.prop IS NOT NULL] instead of [x.has(prop)]")
  get-deprecation = ?Legacy10InDegree(_); to-error-message(|"Use [in_degree(x)] instead of [x.indegree()]")
  get-deprecation = ?Legacy10OutDegree(_); to-error-message(|"Use [out_degree(x)] instead of [x.out_degree()]")

  get-deprecation = ?Legacy10Asc(x); to-error-message(|$<Use [<<origin-text> x> ASC] instead of [ASC(<<origin-text> x>)]>)
  get-deprecation = ?Legacy10Desc(x); to-error-message(|$<Use [<<origin-text> x> DESC] instead of [DESC(<<origin-text> x>)]>)
  get-deprecation = ?String(<id>); is-double-quoted; to-error-message(|"Use single quotes for character string literals; not double quotes")
  get-deprecation = ?Legacy10Identifier(_); to-error-message(|"Use double quotes to delimit labels")
  get-deprecation = ?Ids(_); to-error-message(|"Use [id(x) = xyz] instead of [@xyz]")
  get-deprecation = ?InlinedConstraint(_); to-error-message(|"Constraints should be specified in the WHERE clause instead of the WITH")
  get-deprecation = ?Legacy10Not(_); to-error-message(|"Use [NOT] instead of [!]")
  get-deprecation = ?Legacy10Regex(_, _); to-error-message(|"Use [java_regexp_like(exp1, exp2)] instead of [exp1 =~ exp2]")

  get-pgql10-limitation = ( ?FromClause(_)
                          + ?Subquery(_)
                          + ?Pgql11AsignSymbol()
                          + ?ExtractExp(_, _)
                          + ?ARRAY-AGG(_, _)
                          + ?Shortest(_, _)
                          )
                         ; to-error-message(|"Use [MATCH pattern WHERE filters] instead of [WHERE pattern mixed with filters]")

  get-all-path-limitations = collect(shortest-or-reaches + is-quantifier)
                           ; remove-all(shortest-or-reaches)
                           ; map(to-error-message(|"Quantifier needs to be enclosed by SHORTEST"))

  shortest-or-reaches = ?Shortest(_, _)
                      + ?OutConn(Some(Path(_, _, _)), _)
                      + ?InConn(Some(Path(_, _, _)), _)

  norm-pgql10 = ?Legacy10Label(x); <to-function(|"label")> [x]
  norm-pgql10 = ?Legacy10Labels(x); <to-function(|"labels")> [x]
  norm-pgql10 = ?Legacy10HasLabel(x, lbl); <to-function(|"has_label")> [x, lbl]
  norm-pgql10 = ?Legacy10Id(x); <to-function(|"id")> [x]
  norm-pgql10 = ?Legacy10Has(x, prop); <to-function(|"has_prop")> [x, prop]
  norm-pgql10 = ?Legacy10InDegree(x); <to-function(|"in_degree")> [x]
  norm-pgql10 = ?Legacy10OutDegree(x); <to-function(|"out_degree")> [x]
  norm-pgql10 = ?Legacy10Regex(x, regex); <to-function(|"java_regexp_like")> [x, regex]

  to-function(|name):
    args -> FunctionCall(None(), name, args)

  norm-BindVariable(|c) = ?BindVariable(); !BindVariable(<next-counter> c)

  norm-UMin = ?UMin(Decimal(string)); !Decimal(<conc-strings> ("-", string))

  norm-NOT = ?Legacy10Not(<id>); !Not(<id>)

  norm-NEQ = ?Neq1(exp1, exp2); !Neq(exp1, exp2)
  norm-NEQ = ?Neq2(exp1, exp2); !Neq(exp1, exp2)

  norm-string = String(unquote-and-unescape-string-literal)
              + Label(unquote-and-unescape-identifier) + PropRef(id, unquote-and-unescape-identifier) + FromClause(unquote-and-unescape-identifier)
              + Legacy10Identifier(unquote-and-unescape-string-literal)
              + Date(un-single-quote)
              + Time(un-single-quote)
              + Timestamp(un-single-quote)

  unquote-and-unescape-string-literal = (is-single-quoted; un-single-quote; unescape-string-literal)
                                      + (is-double-quoted; un-double-quote; unescape-identifier) // legacy PGQL 1.0 string literal
  unquote-and-unescape-identifier = (is-double-quoted; un-double-quote; unescape-identifier) <+ id
  external unescape-string-literal(|)
  external unescape-identifier(|)

  norm-timezone:
    Cast(exp, type) -> Cast(exp, type')
    with
      type' := <origin-track-forced(upper-case
              /* In standard SQL the time zone is denoted by "TIME ZONE" while in java.sql.* it's denoted by "TIMEZONE".
                 Clearly people have been confusing it. Therefore, we support both notations in PGQL by normalizing one
                 into the other. Users can then use either. However, please stick to TIME ZONE (with space) in
                 documentation to follow the standard. */
              ; string-replace(|"TIME ZONE", "TIMEZONE"))> type

rules

  norm-singleVertex = ?SingleVertex(elemContents); !PathPattern(Vertex(elemContents), []) // SELECT * WHERE ()

  norm-VertexWithoutBrackets = ?VertexWithoutBrackets(v); !Vertex(ElemContents(Some(<origin-track-forced(<conc-strings> (v, <VERTEX_WITHOUT_BRACKETS>))>), None(), None(), None()))

  norm-edgeContents = ?Some(EdgeContents(<id>))

  name-unnamed-elems(|c) = (?CommonPathExpression(_, _, _, _) + ?GraphPattern(_)); alltd(name-unnamed-elem(|c))
  name-unnamed-elem(|c) = ?ElemContents(None(), type, id', constraints); ?origin; !ElemContents(Some(<unique-name(|c, origin)>), type, id', constraints)
  name-unnamed-elem(|c) = ?origin; (OutConn(?None(); name-unnamed-elem-helper(|c, origin), id) +
                           InConn(?None(); name-unnamed-elem-helper(|c, origin), id) +
                           UndirectedEdge(?None(); name-unnamed-elem-helper(|c, origin), id))
  name-unnamed-elem(|c) = ?OutEdge(quantifier); ?origin; !OutConn(<name-unnamed-elem-helper(|c, origin)>, quantifier) +
                          ?InEdge(quantifier); ?origin; !InConn(<name-unnamed-elem-helper(|c, origin)>, quantifier) +
                          ?UndirectedEdge(quantifier); ?origin; !UndirectedEdge(<name-unnamed-elem-helper(|c, origin)>, quantifier) +
                          ?Path(None(), pathPatternRef, kleeneStar); ?origin; !Path(Some(<unique-name(|c, origin)>), pathPatternRef, kleeneStar)
  name-unnamed-elem-helper(|c, origin) = !ElemContents(Some(<unique-name(|c, origin)>), None(), None(), None())

  norm-inlined-references = ?ElemContents(Some(varName), _, _, _); alltd(norm-inlined-reference(|varName))
  norm-inlined-reference(|varName) =
    ?Obj(dot); !VarRef(varName) + (?Obj(VarRef(v), dot) + ?PropRef(VarRef(v), _));
    if <eq> (v, varName)
    then !ReferenceInInlinedConstraint(v)
    else !CrossReferenceInInlinedConstraint(v)
    end +
    (?SelfPropRef(propName) + ?SelfPropRef(dot, propName)); !PropRef(VarRef(varName), propName)

rules

  norm-matchElems(|variable-counter):
    GraphPattern(elems) -> GraphPattern(vertices, connections, constraints)
    with pathPatterns := <filter(?PathPattern(_, _) + ?Shortest(_, _))> elems
       ; inlined-constraints-for-vertices := <collect-outside-repeated-path(?Vertex(<id>))
                                           ; map(get-inlined-constraints); concat> pathPatterns
       ; inlined-constraints-for-edges := <collect-outside-repeated-path(?OutConn(<id>, None())
                                                                       + ?InConn(<id>, None())
                                                                       + ?UndirectedEdge(<id>, None()))
                                         ; filter(get-inlined-constraints); concat> pathPatterns
       ; pathPatterns' := <alltd(?ElemContents(Some(<id>), _, _, _))> pathPatterns
       ; vertices := <collect-outside-repeated-path(?Vertex(_)); !Vertices(<id>)> pathPatterns'
       ; connections := <get-connections(|variable-counter)> pathPatterns'
       ; non-inlined-constraints := <filter(?CommonPathExpression(_, _, _, _) + ?Constraint(<id>)); remove-all(?CommonPathExpression(_, _, _, _))> elems
       ; constraints := <conc; flatten-list; !Constraints(<id>)> (inlined-constraints-for-vertices, inlined-constraints-for-edges, non-inlined-constraints)

  collect-outside-repeated-path(s) = collect-but-preserve-order(ParenthesizedPath-with-group-variables + s); remove-all(ParenthesizedPath-with-group-variables)

  collect-but-preserve-order(s) = collect-om(s, reverse-then-union); reverse // to preserve order of vertices

  reverse-then-union:
    (x, y) -> <union> (y, x)

  norm-common-path-expression(|variable-counter):
    CommonPathExpression(name, _, path, whereClause) -> CommonPathExpression(name, vertices, connections, constraints)
    with
      inlined-constraints-for-vertices := <collect-om(?Vertex(<id>)); map(get-inlined-constraints); concat> path;
      inlined-constraints-for-edges := <collect-om(?OutConn(<id>, _) + ?InConn(<id>, _) + ?UndirectedEdge(<id>, _)); filter(get-inlined-constraints); concat> path;
      non-inlined-constraints := <(?None(); ![]) <+ (?Some(WhereClause(<id>)); ![<id>])> whereClause;
      constraints := <concat; flatten-list; !Constraints(<id>)> [inlined-constraints-for-vertices, inlined-constraints-for-edges, non-inlined-constraints];
      path' := <alltd(?ElemContents(Some(<id>), _, _, _))> path;
      vertices := <collect-om(?Vertex(_), conc); !Vertices(<id>)> path';
      connections := <get-connections(|variable-counter)> [path']

  get-inlined-constraints:
    ElemContents(Some(var), label, id', otherConstraint) -> [labels, identifiers, otherConstraint']
    with
      labels := <?Some(Labels(<id>)); to-label-constraints(|var) <+ ![]> label;
      identifiers := <?Some(Ids(<id>)); to-id-constraints(|var) <+ ![]> id';
      otherConstraint' := <?Some(InlinedConstraint(<id>)) <+ ![]> otherConstraint

  to-label-constraints(|var):
    labels ->  <to-hasLabel-expressions(|var)> labels
  to-hasLabel-expressions(|var) = bottomup(try(![VarRef(var), <to-label>]; to-function(|"has_label")))
  to-label = ( (?Label(<id>) + ?Legacy10Identifier(<id>)); !String(<id>) ) + ?BindVariable(_)
  to-id-constraints(|var) = bottomup(try(is-literal; origin-track-forced(!Eq(<to-function(|"id")> [VarRef(var)], <id>))))

  // base case: no paths
  get-connections(|variable-counter):
    [] -> []

  // head is path with only one vertex => get neighbors for the other paths
  get-connections(|variable-counter):
    [PathPattern(_, [])|otherPaths] -> <get-connections(|variable-counter)> otherPaths

  // paths with more than one vertex
  get-connections(|variable-counter):
    [PathPattern(
      Vertex(n1),
      edgeVertices@[EdgeVertex(e, Vertex(n2))|_])
    |otherPaths] -> <conc> ([edge], edgesPathTail, edgesTailPaths)
    with
      (edge, _) := <to-connection(|variable-counter)> (n1, e, n2);
      edgesPathTail := <get-connections(|variable-counter)> edgeVertices;
      edgesTailPaths := <get-connections(|variable-counter)> otherPaths

  // base case: only one edgeVertex
  get-connections(|variable-counter):
    [EdgeVertex(_, _)] -> []
    
  // two or more edgeVertices
  get-connections(|variable-counter):
    [EdgeVertex(_, Vertex(n1)) | edgeVertices@[EdgeVertex(e, Vertex(n2))|_]]
    -> <conc> ([edge], edgesPathTail)
    with (edge, _) := <to-connection(|variable-counter)> (n1, e, n2)
       ; edgesPathTail := <get-connections(|variable-counter)> edgeVertices

  // two or more edgeVertices
  get-connections(|variable-counter):
    [t@Shortest(
        kValue
      , PathPattern(
          Vertex(n1)
        , [ EdgeVertex(
              path
            , Vertex(n2)
            )
          ]
        )
      )|otherPaths] -> <conc> ([path''], edgesTailPaths)
    with (path', quantifier) := <to-path(|variable-counter)> path
       ; kValue' := <?Some(K(<id>)) <+ !"1"> kValue
       ; path-variable-name := <unique-name(|variable-counter, t)> // TODO: remove path variable names
       ; path'' := Path(n1, n2, path', quantifier, path-variable-name, Outgoing(), Shortest(), kValue')
       ; edgesTailPaths := <get-connections(|variable-counter)> otherPaths

  to-path(|variable-counter):
    ParenthesizedPath(v1, edge, v2, whereClause, quantifier) -> (CommonPathExpression(name, vertices, edges, constraints), quantifier)
    with srcVertex := <?Some(Vertex(<id>)) <+ ?None(); unique-name(|variable-counter, edge)> v1 
       ; dstVertex := <?Some(Vertex(<id>)) <+ ?None(); unique-name(|variable-counter, edge)> v2 
       ; name := <unique-name(|variable-counter, edge)>
       ; (edge', _) := <to-connection(|variable-counter)> (srcVertex, edge, dstVertex)
       ; vertices := Vertices([Vertex(srcVertex), Vertex(dstVertex)])
       ; edges := Edges([edge'])
       ; constraints := <?None(); !Constraints([]) <+ ?Some(WhereClause(constraint)); !Constraints([constraint])> whereClause

  to-path(|variable-counter):
    edge ->  (CommonPathExpression(name, vertices, edges, constraints), quantifier)
    where srcVertex := <unique-name(|variable-counter, edge)>
        ; dstVertex := <unique-name(|variable-counter, edge)>
        ; (edge', quantifier) := <to-connection(|variable-counter)> (srcVertex, edge, dstVertex)
     with name := <unique-name(|variable-counter, edge)>
        ; vertices := Vertices([Vertex(srcVertex), Vertex(dstVertex)])
        ; edges := Edges([edge'])
        ; constraints := []

  to-connection(|variable-counter):
    (n1, e, n2) -> (expansion, quantifier)
    where <?OutConn(_, quantifier) + ?InConn(_, quantifier) + ?UndirectedEdge(_, quantifier)> e
    with
      switch !e
        case ?OutConn(edgeOrPath, _):
          src := n1;
          dst := n2;
          dir := Outgoing()
        case ?InConn(edgeOrPath, _):
          src := n2;
          dst := n1;
          dir := Incoming()
        case ?UndirectedEdge(edgeOrPath, _):
          src := n1;
          dst := n2;
          dir := Undirected()
        otherwise: fail
      end;
      switch !edgeOrPath
        case is-string:
          expansion := Edge(src, edgeOrPath, dst, dir)
        case ?Some(Path(Some(pathName), pathPatternName, quantifier')):
          expansion := Path(src, dst, pathPatternName, quantifier', pathName, dir, Reaches(), -1)
        otherwise: fail
      end

rules

  norm-has-prop = ?Legacy10Has(varRef, [prop]); !Legacy10Has(varRef, prop) <+
                  ?Legacy10Has(varRef, <id>); map(!Legacy10Has(varRef, <id>)); create-conjunct

  create-conjunct = reverse; !(<Tl>, <Hd>); foldl(create-OR)
  create-OR = ?(exp1, exp2); !And(exp1, exp2)

rules

  norm-hop-distance = ?ZeroOrMore(); !BetweenNAndM("0", "-1")
  norm-hop-distance = ?OneOrMore(); !BetweenNAndM("1", "-1")
  norm-hop-distance = ?Optional(); !BetweenNAndM("0", "1")
  norm-hop-distance = ?ExactlyN(n); !BetweenNAndM(n, n)
  norm-hop-distance = ?NOrMore(n); !BetweenNAndM(n, "-1")
  norm-hop-distance = ?BetweenZeroAndM(m); !BetweenNAndM("0", m)

  ParenthesizedPath-with-group-variables:
    t@ParenthesizedPath(_, _, _, _, quantifier) -> t
    where <not(has-at-most-one-binding)> quantifier

rules

  // pgql 1.1
  norm-query(|error-messages, variable-counter):
    Query(commonPathExpressions, selectClause, fromClause, graphPattern, whereClause, groupByClause, havingClause, orderByClause, limitOffsets) ->
      <norm-query(|error-messages, "v1.1", variable-counter)> (commonPathExpressions, selectClause, fromClause, graphPattern', groupByClause, havingClause, orderByClause, limitOffsets)
    with
      <?GraphPattern(vertices, connections, Constraints(inlined-constraints))> graphPattern;
      non-inlined-constraints := <?Some(WhereClause(<id>)); ![<id>] + ?None(); ![]> whereClause;
      constraints := Constraints(<conc> (inlined-constraints,  non-inlined-constraints));
      graphPattern' := GraphPattern(vertices, connections, constraints)

  // pgql 1.0
  norm-query(|error-messages, variable-counter):
    q@Pgql10Query(commonPathExpressions, selectClause, fromClause, graphPattern, groupByClause, orderByClause, limitOffsets) ->
      <norm-query(|error-messages, "v1.0", variable-counter)> (commonPathExpressions, selectClause, fromClause, graphPattern, groupByClause, havingClause, orderByClause, limitOffsets)
      with havingClause := None()
    
  norm-query(|error-messages, version, variable-counter):
    (commonPathExpressions, SelectClause(distinct, projection), fromClause, graphPattern, groupByClause, havingClause, orderByClause, limitOffsets) ->
        NormalizedQuery(commonPathExpressions', SelectClause(distinct, projection'), fromClause, graphPattern, groupByClause', havingClause, orderByElems, limitOffsets', error-messages, version)
    with
      commonPathExpressions' := <map(norm-common-path-expression(|variable-counter)); !CommonPathExpressions(<id>)> commonPathExpressions;

      expAsGroupVars := <?Some(GroupByClause(<id>)) <+ ![]> groupByClause;
      expAsGroupVars' := <map(norm-ExpAsVar)> expAsGroupVars;
      groupByClause' := <?Some(_); !Some(GroupByClause(expAsGroupVars')) <+ !None()> groupByClause;

      projection' := <norm-ExpAsVars(|expAsGroupVars') <+ norm-select-star(|graphPattern, expAsGroupVars')> projection;

      ExpAsVars(expAsSelectVars) := projection';
      allExpAsVars := <conc> (expAsGroupVars', <try(?Star(); ![])> expAsSelectVars);
      orderByElems := <try(norm-orderBy(|allExpAsVars, version))> orderByClause;

      limitOffsets' := <norm-limitOffsets> limitOffsets

  norm-ExpAsVars(|expAsGroupVars'):
    t@ExpAsVars(expAsVars) -> <origin-track-forced(!ExpAsVars(expAsVars'))> t 
    with expAsVars' := <map(norm-ExpAsVar)> expAsVars

  norm-ExpAsVar = ?ExpAsVar(exp, Some(VarAssign(VarDef(v)))); !ExpAsVar(exp, v, NonAnonymous())
  norm-ExpAsVar = ?ExpAsVar(exp, None()); !ExpAsVar(exp, <?VarRef(<id>) <+ origin-track-forced(origin-text)> exp, Anonymous())
  norm-ExpAsVar = ?ExpAsVar(_, v, _); where (<origin-offset> v)

  norm-select-star(|graphPattern, group-exps):
    star@Star() -> <origin-track-forced(!ExpAsVars(expAsSelectVars))> star
    with if [] := group-exps
           then vars := <collect(?Vertex(<id>) + ?Edge(_, <id>, _, _) + ?Subquery(_)); filter(is-string; not(is-substring(GENERATED)))> graphPattern;
                expAsSelectVars := <map(generate-ExpAsVar(|star); norm-ExpAsVar)> vars
           else expAsSelectVars := star
         end

  generate-ExpAsVar(|star):
    v -> expAsVar
    with v' := <origin-track-forced(!(v, ""); conc-strings /* generate a new string to make it loose origin */)> star
       ; varRef := <origin-track-forced(!VarRef(v'))> star
       ; expAsVar := <origin-track-forced(!ExpAsVar(varRef, v', Anonymous()))> star

  norm-orderBy(|allExpAsVars, version):
    Some(OrderByClause(elems)) -> Some(OrderByClause(elems'))
    with
      elems' := <map(norm-orderBy-ordering(|version))> elems

  norm-orderBy-ordering(|version) =
    ((?Desc(<id>) + ?Legacy10Desc(<id>)); !OrderByElem(<id>, Desc(), version)) <+
    ((try(?Asc(<id>) + ?Legacy10Asc(<id>))); !OrderByElem(<id>, Asc(), version))

  norm-limitOffsets = ?None(); !LimitOffsetClauses(None(), None())
  norm-limitOffsets = ?Some(LimitOffsetClauses(limitClause, offsetClause)); !LimitOffsetClauses(Some(limitClause), offsetClause)
  norm-limitOffsets = ?Some(OffsetLimitClauses(offsetClause, limitClause)); !LimitOffsetClauses(limitClause, Some(offsetClause))
