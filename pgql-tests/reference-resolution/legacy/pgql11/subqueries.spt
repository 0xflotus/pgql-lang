module select

language pgql-lang

test Variable reference in NOT EXISTS #1 [[

  SELECT *
   MATCH (x) -> ([[y]])
   WHERE NOT EXISTS ( SELECT * MATCH (x) -> ([[z]]) WHERE [[z]] <> [[y]] )
]] resolve #3 to #2
   resolve #4 to #1

test Variable reference in NOT EXISTS #2 [[

  SELECT *
   MATCH (x)
   WHERE NOT EXISTS ( SELECT * MATCH ([[x]]) -> ([[y]]) WHERE [[x]].salary = [[y]].salary )

]] resolve #3 to #1
   resolve #4 to #2

test Reference select key from outer query (1) [[

    SELECT n.age AS [[nAge]]
     MATCH (n)
   ORDER BY ( SELECT [[nAge]] MATCH (n) LIMIT 1 )

]] resolve #2 to #1

test Reference select key from outer query (2) [[

    SELECT n.age AS [[nAge]]
     MATCH (n)
   ORDER BY ( SELECT AVG([[nAge]]) AS avg MATCH (n) GROUP BY n LIMIT 1 )

]] resolve #2 to #1

test Reference select key from outer query (3) [[

    SELECT n.age AS [[nAge]]
     MATCH (n)
  GROUP BY n.age AS nAge
  ORDER BY ( SELECT AVG([[nAge]]) AS avg MATCH (n) GROUP BY n LIMIT 1 )

]] resolve #2 to #1

test Reference vertices from both inner and outer query inside aggregation [[

  SELECT id([[a]]) AS id, (SELECT COUNT([[a]].prop + [[b]].prop) AS cnt1 MATCH ([[b]])) AS cnt2
   MATCH ([[a]])

]] resolve #1 to #5
   resolve #2 to #5
   resolve #3 to #4

test Reference group key from outer query (1) [[

    SELECT 123 AS x
     MATCH (n)
    GROUP BY n.age AS [[nAge]]
   ORDER BY ( SELECT AVG([[nAge]]) AS avg MATCH (n) LIMIT 1 )

]] resolve #2 to #1

test Reference group key from outer query (2) [[

    SELECT 123 AS x
     MATCH (n)
  GROUP BY n.age AS [[nAge]]
  ORDER BY ( SELECT AVG([[nAge]]) AS avg MATCH (n) GROUP BY n LIMIT 1 )

]] resolve #2 to #1
