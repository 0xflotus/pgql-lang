module select

language pgql-lang

test Vertex from MATCH in SELECT [[

  SELECT [[n]], in_degree([[n]]) AS inDegree, [[n]].tax_rate * [[n]].salary AS tax_amount
   MATCH ([[n]])
]] resolve #1 to #5
   resolve #2 to #5
   resolve #3 to #5
   resolve #4 to #5

test Edge from MATCH in SELECT [[

  SELECT [[e]], label([[e]]) AS lbl, [[e]].weight AS weight
   MATCH (n) -[ [[e]]:likes ]-> (m)

]] resolve #1 to #4
   resolve #2 to #4
   resolve #3 to #4

test Vertex from MATCH in ORDER BY [[

    SELECT 123 AS x
     MATCH ([[n]])
  ORDER BY in_degree([[n]]), [[n]].tax_rate * [[n]].salary

]] resolve #2 to #1
   resolve #3 to #1
   resolve #4 to #1

test Edge from MATCH in ORDER BY [[

    SELECT 123 AS x
     MATCH (n) -[ [[e]]:likes ]-> (m)
  ORDER BY label([[e]]), [[e]].weight

]] resolve #2 to #1
   resolve #3 to #1

test Variable from SELECT in ORDER BY [[

    SELECT n.tax_rate * n.salary AS [[tax_amount]]
     MATCH (n)
  ORDER BY [[tax_amount]]

]] resolve #2 to #1

test Variable from GROUP BY in SELECT [[

    SELECT [[nAge]] AS age
     MATCH (n)
  GROUP BY n.age AS [[nAge]]

]] resolve #1 to #2

test Variable from GROUP BY in ORDER BY [[

    SELECT [[nAge]]
     MATCH (n)
  GROUP BY n.age AS nAge
  ORDER BY [[nAge]]

]] resolve #2 to #1

test Variable from MATCH in aggregation in SELECT #1 [[

  SELECT AVG([[n]].salary) AS avgSalary
   MATCH ([[n]])

]] resolve #1 to #2

test Variable from MATCH in aggregation in SELECT #2 [[

    SELECT AVG([[n]].salary) AS avgSalary
     MATCH ([[n]])
  GROUP BY n.age AS nAge

]] resolve #1 to #2

test Variable from MATCH in aggregation in ORDER BY #1 [[

    SELECT SUM(n.salary) AS sum
     MATCH ([[n]])
  ORDER BY AVG([[n]].salary)

]] resolve #2 to #1

test Variable from MATCH in aggregation in ORDER BY #2 [[

    SELECT nAge
     MATCH ([[n]])
  GROUP BY n.age AS nAge
  ORDER BY AVG([[n]].salary)

]] resolve #2 to #1

test Mixed aggregation and non-aggregation in SELECT [[

    SELECT n.age AS nAge2, AVG([[n]].salary) AS avg
     MATCH ([[n]])
  GROUP BY n.age AS nAge

]] resolve #1 to #2

test Mixed aggregation and non-aggregation in ORDER BY [[

    SELECT nAge
     MATCH ([[n]])
  GROUP BY n.age AS nAge
  ORDER BY AVG([[n]].salary), n.age

]] resolve #2 to #1

test Variable reference in NOT EXISTS #1 [[

  SELECT *
   MATCH (x) -> ([[y]])
   WHERE NOT EXISTS ( SELECT * MATCH (x) -> ([[z]]) WHERE [[z]] <> [[y]] )
]] resolve #3 to #2
   resolve #4 to #1

test Variable reference in NOT EXISTS #2 [[

  SELECT *
   MATCH (x)
   WHERE NOT EXISTS ( SELECT * MATCH ([[x]]) -> ([[y]]) WHERE [[x]].salary = [[y]].salary )

]] resolve #3 to #1
   resolve #4 to #2

test Can't reference previous SELECT element [[

  SELECT x AS n, [[n]]
   MATCH (x) -> ([[n]])

]] resolve #1 to #2

test Can't reference previous GROUP BY element [[

  SELECT x
   MATCH (x) -> ([[n]])
  GROUP BY x AS n, [[n]]

]] resolve #2 to #1

test Reference select key from outer query (1) [[

    SELECT n.age AS [[nAge]]
     MATCH (n)
   ORDER BY ( SELECT [[nAge]] MATCH (n) LIMIT 1 )

]] resolve #2 to #1

test Reference select key from outer query (2) [[

    SELECT n.age AS [[nAge]]
     MATCH (n)
   ORDER BY ( SELECT AVG([[nAge]]) AS avg MATCH (n) GROUP BY n LIMIT 1 )

]] resolve #2 to #1

test Reference select key from outer query (3) [[

    SELECT n.age AS [[nAge]]
     MATCH (n)
  GROUP BY n.age AS nAge
  ORDER BY ( SELECT AVG([[nAge]]) AS avg MATCH (n) GROUP BY n LIMIT 1 )

]] resolve #2 to #1

test Reference vertices from both inner and outer query inside aggregation [[

  SELECT id([[a]]) AS id, (SELECT COUNT([[a]].prop + [[b]].prop) AS cnt1 MATCH ([[b]])) AS cnt2
   MATCH ([[a]])

]] resolve #1 to #5
   resolve #2 to #5
   resolve #3 to #4

test Reference group key from outer query (1) [[

    SELECT 123 AS x
     MATCH (n)
    GROUP BY n.age AS [[nAge]]
   ORDER BY ( SELECT AVG([[nAge]]) AS avg MATCH (n) LIMIT 1 )

]] resolve #2 to #1

test Reference group key from outer query (2) [[

    SELECT 123 AS x
     MATCH (n)
  GROUP BY n.age AS [[nAge]]
  ORDER BY ( SELECT AVG([[nAge]]) AS avg MATCH (n) GROUP BY n LIMIT 1 )

]] resolve #2 to #1

test Reference group variable in path (1) [[

  SELECT MIN([[n]].age) AS min, MIN(AVG([[e]].weight)) AS avg
   MATCH SHORTEST 10 ( ([[n]]) -[ [[e]] ]->* (m) )

]] resolve #1 to #3
   resolve #2 to #4

test Reference group variable in path (2) [[

  SELECT MIN([[n]].age) AS min, MIN(AVG([[e]].weight)) AS avg
   MATCH SHORTEST 10 ( ([[n]]) -[ [[e]] ]->* (m) )
   GROUP BY n.name AS nName

]] resolve #1 to #3
   resolve #2 to #4

test Reference group variable in path (3) [[

  SELECT MIN(AVG([[e]].weight)) AS avg
   MATCH SHORTEST 10 ( (n) -[ [[e]] ]->* (m) )

]] resolve #1 to #2
